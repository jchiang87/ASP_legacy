# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

"""
Interface to skymaps
"""

import libasp_skymaps
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class PySwigIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = libasp_skymaps.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return libasp_skymaps.PySwigIterator_value(*args)
    def incr(*args): return libasp_skymaps.PySwigIterator_incr(*args)
    def decr(*args): return libasp_skymaps.PySwigIterator_decr(*args)
    def distance(*args): return libasp_skymaps.PySwigIterator_distance(*args)
    def equal(*args): return libasp_skymaps.PySwigIterator_equal(*args)
    def copy(*args): return libasp_skymaps.PySwigIterator_copy(*args)
    def next(*args): return libasp_skymaps.PySwigIterator_next(*args)
    def previous(*args): return libasp_skymaps.PySwigIterator_previous(*args)
    def advance(*args): return libasp_skymaps.PySwigIterator_advance(*args)
    def __eq__(*args): return libasp_skymaps.PySwigIterator___eq__(*args)
    def __ne__(*args): return libasp_skymaps.PySwigIterator___ne__(*args)
    def __iadd__(*args): return libasp_skymaps.PySwigIterator___iadd__(*args)
    def __isub__(*args): return libasp_skymaps.PySwigIterator___isub__(*args)
    def __add__(*args): return libasp_skymaps.PySwigIterator___add__(*args)
    def __sub__(*args): return libasp_skymaps.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = libasp_skymaps.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class DoublePair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoublePair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoublePair, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libasp_skymaps.new_DoublePair(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = libasp_skymaps.DoublePair_first_set
    __swig_getmethods__["first"] = libasp_skymaps.DoublePair_first_get
    if _newclass:first = _swig_property(libasp_skymaps.DoublePair_first_get, libasp_skymaps.DoublePair_first_set)
    __swig_setmethods__["second"] = libasp_skymaps.DoublePair_second_set
    __swig_getmethods__["second"] = libasp_skymaps.DoublePair_second_get
    if _newclass:second = _swig_property(libasp_skymaps.DoublePair_second_get, libasp_skymaps.DoublePair_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = libasp_skymaps.delete_DoublePair
    __del__ = lambda self : None;
DoublePair_swigregister = libasp_skymaps.DoublePair_swigregister
DoublePair_swigregister(DoublePair)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return libasp_skymaps.StringVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return libasp_skymaps.StringVector___nonzero__(*args)
    def __len__(*args): return libasp_skymaps.StringVector___len__(*args)
    def pop(*args): return libasp_skymaps.StringVector_pop(*args)
    def __getslice__(*args): return libasp_skymaps.StringVector___getslice__(*args)
    def __setslice__(*args): return libasp_skymaps.StringVector___setslice__(*args)
    def __delslice__(*args): return libasp_skymaps.StringVector___delslice__(*args)
    def __delitem__(*args): return libasp_skymaps.StringVector___delitem__(*args)
    def __getitem__(*args): return libasp_skymaps.StringVector___getitem__(*args)
    def __setitem__(*args): return libasp_skymaps.StringVector___setitem__(*args)
    def append(*args): return libasp_skymaps.StringVector_append(*args)
    def empty(*args): return libasp_skymaps.StringVector_empty(*args)
    def size(*args): return libasp_skymaps.StringVector_size(*args)
    def clear(*args): return libasp_skymaps.StringVector_clear(*args)
    def swap(*args): return libasp_skymaps.StringVector_swap(*args)
    def get_allocator(*args): return libasp_skymaps.StringVector_get_allocator(*args)
    def begin(*args): return libasp_skymaps.StringVector_begin(*args)
    def end(*args): return libasp_skymaps.StringVector_end(*args)
    def rbegin(*args): return libasp_skymaps.StringVector_rbegin(*args)
    def rend(*args): return libasp_skymaps.StringVector_rend(*args)
    def pop_back(*args): return libasp_skymaps.StringVector_pop_back(*args)
    def erase(*args): return libasp_skymaps.StringVector_erase(*args)
    def __init__(self, *args): 
        this = libasp_skymaps.new_StringVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return libasp_skymaps.StringVector_push_back(*args)
    def front(*args): return libasp_skymaps.StringVector_front(*args)
    def back(*args): return libasp_skymaps.StringVector_back(*args)
    def assign(*args): return libasp_skymaps.StringVector_assign(*args)
    def resize(*args): return libasp_skymaps.StringVector_resize(*args)
    def insert(*args): return libasp_skymaps.StringVector_insert(*args)
    def reserve(*args): return libasp_skymaps.StringVector_reserve(*args)
    def capacity(*args): return libasp_skymaps.StringVector_capacity(*args)
    __swig_destroy__ = libasp_skymaps.delete_StringVector
    __del__ = lambda self : None;
StringVector_swigregister = libasp_skymaps.StringVector_swigregister
StringVector_swigregister(StringVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return libasp_skymaps.DoubleVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return libasp_skymaps.DoubleVector___nonzero__(*args)
    def __len__(*args): return libasp_skymaps.DoubleVector___len__(*args)
    def pop(*args): return libasp_skymaps.DoubleVector_pop(*args)
    def __getslice__(*args): return libasp_skymaps.DoubleVector___getslice__(*args)
    def __setslice__(*args): return libasp_skymaps.DoubleVector___setslice__(*args)
    def __delslice__(*args): return libasp_skymaps.DoubleVector___delslice__(*args)
    def __delitem__(*args): return libasp_skymaps.DoubleVector___delitem__(*args)
    def __getitem__(*args): return libasp_skymaps.DoubleVector___getitem__(*args)
    def __setitem__(*args): return libasp_skymaps.DoubleVector___setitem__(*args)
    def append(*args): return libasp_skymaps.DoubleVector_append(*args)
    def empty(*args): return libasp_skymaps.DoubleVector_empty(*args)
    def size(*args): return libasp_skymaps.DoubleVector_size(*args)
    def clear(*args): return libasp_skymaps.DoubleVector_clear(*args)
    def swap(*args): return libasp_skymaps.DoubleVector_swap(*args)
    def get_allocator(*args): return libasp_skymaps.DoubleVector_get_allocator(*args)
    def begin(*args): return libasp_skymaps.DoubleVector_begin(*args)
    def end(*args): return libasp_skymaps.DoubleVector_end(*args)
    def rbegin(*args): return libasp_skymaps.DoubleVector_rbegin(*args)
    def rend(*args): return libasp_skymaps.DoubleVector_rend(*args)
    def pop_back(*args): return libasp_skymaps.DoubleVector_pop_back(*args)
    def erase(*args): return libasp_skymaps.DoubleVector_erase(*args)
    def __init__(self, *args): 
        this = libasp_skymaps.new_DoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return libasp_skymaps.DoubleVector_push_back(*args)
    def front(*args): return libasp_skymaps.DoubleVector_front(*args)
    def back(*args): return libasp_skymaps.DoubleVector_back(*args)
    def assign(*args): return libasp_skymaps.DoubleVector_assign(*args)
    def resize(*args): return libasp_skymaps.DoubleVector_resize(*args)
    def insert(*args): return libasp_skymaps.DoubleVector_insert(*args)
    def reserve(*args): return libasp_skymaps.DoubleVector_reserve(*args)
    def capacity(*args): return libasp_skymaps.DoubleVector_capacity(*args)
    __swig_destroy__ = libasp_skymaps.delete_DoubleVector
    __del__ = lambda self : None;
DoubleVector_swigregister = libasp_skymaps.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class FloatVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return libasp_skymaps.FloatVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return libasp_skymaps.FloatVector___nonzero__(*args)
    def __len__(*args): return libasp_skymaps.FloatVector___len__(*args)
    def pop(*args): return libasp_skymaps.FloatVector_pop(*args)
    def __getslice__(*args): return libasp_skymaps.FloatVector___getslice__(*args)
    def __setslice__(*args): return libasp_skymaps.FloatVector___setslice__(*args)
    def __delslice__(*args): return libasp_skymaps.FloatVector___delslice__(*args)
    def __delitem__(*args): return libasp_skymaps.FloatVector___delitem__(*args)
    def __getitem__(*args): return libasp_skymaps.FloatVector___getitem__(*args)
    def __setitem__(*args): return libasp_skymaps.FloatVector___setitem__(*args)
    def append(*args): return libasp_skymaps.FloatVector_append(*args)
    def empty(*args): return libasp_skymaps.FloatVector_empty(*args)
    def size(*args): return libasp_skymaps.FloatVector_size(*args)
    def clear(*args): return libasp_skymaps.FloatVector_clear(*args)
    def swap(*args): return libasp_skymaps.FloatVector_swap(*args)
    def get_allocator(*args): return libasp_skymaps.FloatVector_get_allocator(*args)
    def begin(*args): return libasp_skymaps.FloatVector_begin(*args)
    def end(*args): return libasp_skymaps.FloatVector_end(*args)
    def rbegin(*args): return libasp_skymaps.FloatVector_rbegin(*args)
    def rend(*args): return libasp_skymaps.FloatVector_rend(*args)
    def pop_back(*args): return libasp_skymaps.FloatVector_pop_back(*args)
    def erase(*args): return libasp_skymaps.FloatVector_erase(*args)
    def __init__(self, *args): 
        this = libasp_skymaps.new_FloatVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return libasp_skymaps.FloatVector_push_back(*args)
    def front(*args): return libasp_skymaps.FloatVector_front(*args)
    def back(*args): return libasp_skymaps.FloatVector_back(*args)
    def assign(*args): return libasp_skymaps.FloatVector_assign(*args)
    def resize(*args): return libasp_skymaps.FloatVector_resize(*args)
    def insert(*args): return libasp_skymaps.FloatVector_insert(*args)
    def reserve(*args): return libasp_skymaps.FloatVector_reserve(*args)
    def capacity(*args): return libasp_skymaps.FloatVector_capacity(*args)
    __swig_destroy__ = libasp_skymaps.delete_FloatVector
    __del__ = lambda self : None;
FloatVector_swigregister = libasp_skymaps.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class LongVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LongVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LongVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return libasp_skymaps.LongVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return libasp_skymaps.LongVector___nonzero__(*args)
    def __len__(*args): return libasp_skymaps.LongVector___len__(*args)
    def pop(*args): return libasp_skymaps.LongVector_pop(*args)
    def __getslice__(*args): return libasp_skymaps.LongVector___getslice__(*args)
    def __setslice__(*args): return libasp_skymaps.LongVector___setslice__(*args)
    def __delslice__(*args): return libasp_skymaps.LongVector___delslice__(*args)
    def __delitem__(*args): return libasp_skymaps.LongVector___delitem__(*args)
    def __getitem__(*args): return libasp_skymaps.LongVector___getitem__(*args)
    def __setitem__(*args): return libasp_skymaps.LongVector___setitem__(*args)
    def append(*args): return libasp_skymaps.LongVector_append(*args)
    def empty(*args): return libasp_skymaps.LongVector_empty(*args)
    def size(*args): return libasp_skymaps.LongVector_size(*args)
    def clear(*args): return libasp_skymaps.LongVector_clear(*args)
    def swap(*args): return libasp_skymaps.LongVector_swap(*args)
    def get_allocator(*args): return libasp_skymaps.LongVector_get_allocator(*args)
    def begin(*args): return libasp_skymaps.LongVector_begin(*args)
    def end(*args): return libasp_skymaps.LongVector_end(*args)
    def rbegin(*args): return libasp_skymaps.LongVector_rbegin(*args)
    def rend(*args): return libasp_skymaps.LongVector_rend(*args)
    def pop_back(*args): return libasp_skymaps.LongVector_pop_back(*args)
    def erase(*args): return libasp_skymaps.LongVector_erase(*args)
    def __init__(self, *args): 
        this = libasp_skymaps.new_LongVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return libasp_skymaps.LongVector_push_back(*args)
    def front(*args): return libasp_skymaps.LongVector_front(*args)
    def back(*args): return libasp_skymaps.LongVector_back(*args)
    def assign(*args): return libasp_skymaps.LongVector_assign(*args)
    def resize(*args): return libasp_skymaps.LongVector_resize(*args)
    def insert(*args): return libasp_skymaps.LongVector_insert(*args)
    def reserve(*args): return libasp_skymaps.LongVector_reserve(*args)
    def capacity(*args): return libasp_skymaps.LongVector_capacity(*args)
    __swig_destroy__ = libasp_skymaps.delete_LongVector
    __del__ = lambda self : None;
LongVector_swigregister = libasp_skymaps.LongVector_swigregister
LongVector_swigregister(LongVector)

class Hep3Vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Hep3Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Hep3Vector, name)
    __repr__ = _swig_repr
    X = libasp_skymaps.Hep3Vector_X
    Y = libasp_skymaps.Hep3Vector_Y
    Z = libasp_skymaps.Hep3Vector_Z
    NUM_COORDINATES = libasp_skymaps.Hep3Vector_NUM_COORDINATES
    SIZE = libasp_skymaps.Hep3Vector_SIZE
    def __init__(self, *args): 
        this = libasp_skymaps.new_Hep3Vector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libasp_skymaps.delete_Hep3Vector
    __del__ = lambda self : None;
    def __call__(*args): return libasp_skymaps.Hep3Vector___call__(*args)
    def x(*args): return libasp_skymaps.Hep3Vector_x(*args)
    def y(*args): return libasp_skymaps.Hep3Vector_y(*args)
    def z(*args): return libasp_skymaps.Hep3Vector_z(*args)
    def setX(*args): return libasp_skymaps.Hep3Vector_setX(*args)
    def setY(*args): return libasp_skymaps.Hep3Vector_setY(*args)
    def setZ(*args): return libasp_skymaps.Hep3Vector_setZ(*args)
    def set(*args): return libasp_skymaps.Hep3Vector_set(*args)
    def phi(*args): return libasp_skymaps.Hep3Vector_phi(*args)
    def mag2(*args): return libasp_skymaps.Hep3Vector_mag2(*args)
    def mag(*args): return libasp_skymaps.Hep3Vector_mag(*args)
    def setPhi(*args): return libasp_skymaps.Hep3Vector_setPhi(*args)
    def setTheta(*args): return libasp_skymaps.Hep3Vector_setTheta(*args)
    def setMag(*args): return libasp_skymaps.Hep3Vector_setMag(*args)
    def setPerp(*args): return libasp_skymaps.Hep3Vector_setPerp(*args)
    def setCylTheta(*args): return libasp_skymaps.Hep3Vector_setCylTheta(*args)
    def perp2(*args): return libasp_skymaps.Hep3Vector_perp2(*args)
    def perp(*args): return libasp_skymaps.Hep3Vector_perp(*args)
    def __eq__(*args): return libasp_skymaps.Hep3Vector___eq__(*args)
    def __ne__(*args): return libasp_skymaps.Hep3Vector___ne__(*args)
    def isNear(*args): return libasp_skymaps.Hep3Vector_isNear(*args)
    def howNear(*args): return libasp_skymaps.Hep3Vector_howNear(*args)
    def deltaR(*args): return libasp_skymaps.Hep3Vector_deltaR(*args)
    def __iadd__(*args): return libasp_skymaps.Hep3Vector___iadd__(*args)
    def __isub__(*args): return libasp_skymaps.Hep3Vector___isub__(*args)
    def __neg__(*args): return libasp_skymaps.Hep3Vector___neg__(*args)
    def __idiv__(*args): return libasp_skymaps.Hep3Vector___idiv__(*args)
    def unit(*args): return libasp_skymaps.Hep3Vector_unit(*args)
    def orthogonal(*args): return libasp_skymaps.Hep3Vector_orthogonal(*args)
    def dot(*args): return libasp_skymaps.Hep3Vector_dot(*args)
    def cross(*args): return libasp_skymaps.Hep3Vector_cross(*args)
    def pseudoRapidity(*args): return libasp_skymaps.Hep3Vector_pseudoRapidity(*args)
    def setEta(*args): return libasp_skymaps.Hep3Vector_setEta(*args)
    def setCylEta(*args): return libasp_skymaps.Hep3Vector_setCylEta(*args)
    def rotateX(*args): return libasp_skymaps.Hep3Vector_rotateX(*args)
    def rotateY(*args): return libasp_skymaps.Hep3Vector_rotateY(*args)
    def rotateZ(*args): return libasp_skymaps.Hep3Vector_rotateZ(*args)
    def rotateUz(*args): return libasp_skymaps.Hep3Vector_rotateUz(*args)
    def __imul__(*args): return libasp_skymaps.Hep3Vector___imul__(*args)
    def transform(*args): return libasp_skymaps.Hep3Vector_transform(*args)
    def setRThetaPhi(*args): return libasp_skymaps.Hep3Vector_setRThetaPhi(*args)
    def setREtaPhi(*args): return libasp_skymaps.Hep3Vector_setREtaPhi(*args)
    def setRhoPhiZ(*args): return libasp_skymaps.Hep3Vector_setRhoPhiZ(*args)
    def setRhoPhiTheta(*args): return libasp_skymaps.Hep3Vector_setRhoPhiTheta(*args)
    def setRhoPhiEta(*args): return libasp_skymaps.Hep3Vector_setRhoPhiEta(*args)
    def getX(*args): return libasp_skymaps.Hep3Vector_getX(*args)
    def getY(*args): return libasp_skymaps.Hep3Vector_getY(*args)
    def getZ(*args): return libasp_skymaps.Hep3Vector_getZ(*args)
    def getR(*args): return libasp_skymaps.Hep3Vector_getR(*args)
    def getTheta(*args): return libasp_skymaps.Hep3Vector_getTheta(*args)
    def getPhi(*args): return libasp_skymaps.Hep3Vector_getPhi(*args)
    def r(*args): return libasp_skymaps.Hep3Vector_r(*args)
    def rho(*args): return libasp_skymaps.Hep3Vector_rho(*args)
    def getRho(*args): return libasp_skymaps.Hep3Vector_getRho(*args)
    def getEta(*args): return libasp_skymaps.Hep3Vector_getEta(*args)
    def setR(*args): return libasp_skymaps.Hep3Vector_setR(*args)
    def setRho(*args): return libasp_skymaps.Hep3Vector_setRho(*args)
    def compare(*args): return libasp_skymaps.Hep3Vector_compare(*args)
    def __gt__(*args): return libasp_skymaps.Hep3Vector___gt__(*args)
    def __lt__(*args): return libasp_skymaps.Hep3Vector___lt__(*args)
    def __ge__(*args): return libasp_skymaps.Hep3Vector___ge__(*args)
    def __le__(*args): return libasp_skymaps.Hep3Vector___le__(*args)
    def diff2(*args): return libasp_skymaps.Hep3Vector_diff2(*args)
    __swig_getmethods__["setTolerance"] = lambda x: libasp_skymaps.Hep3Vector_setTolerance
    if _newclass:setTolerance = staticmethod(libasp_skymaps.Hep3Vector_setTolerance)
    __swig_getmethods__["getTolerance"] = lambda x: libasp_skymaps.Hep3Vector_getTolerance
    if _newclass:getTolerance = staticmethod(libasp_skymaps.Hep3Vector_getTolerance)
    def isParallel(*args): return libasp_skymaps.Hep3Vector_isParallel(*args)
    def isOrthogonal(*args): return libasp_skymaps.Hep3Vector_isOrthogonal(*args)
    def howParallel(*args): return libasp_skymaps.Hep3Vector_howParallel(*args)
    def howOrthogonal(*args): return libasp_skymaps.Hep3Vector_howOrthogonal(*args)
    ToleranceTicks = libasp_skymaps.Hep3Vector_ToleranceTicks
    def beta(*args): return libasp_skymaps.Hep3Vector_beta(*args)
    def gamma(*args): return libasp_skymaps.Hep3Vector_gamma(*args)
    def coLinearRapidity(*args): return libasp_skymaps.Hep3Vector_coLinearRapidity(*args)
    def angle(*args): return libasp_skymaps.Hep3Vector_angle(*args)
    def theta(*args): return libasp_skymaps.Hep3Vector_theta(*args)
    def cosTheta(*args): return libasp_skymaps.Hep3Vector_cosTheta(*args)
    def cos2Theta(*args): return libasp_skymaps.Hep3Vector_cos2Theta(*args)
    def project(*args): return libasp_skymaps.Hep3Vector_project(*args)
    def perpPart(*args): return libasp_skymaps.Hep3Vector_perpPart(*args)
    def rapidity(*args): return libasp_skymaps.Hep3Vector_rapidity(*args)
    def eta(*args): return libasp_skymaps.Hep3Vector_eta(*args)
    def deltaPhi(*args): return libasp_skymaps.Hep3Vector_deltaPhi(*args)
    def polarAngle(*args): return libasp_skymaps.Hep3Vector_polarAngle(*args)
    def azimAngle(*args): return libasp_skymaps.Hep3Vector_azimAngle(*args)
    def rotate(*args): return libasp_skymaps.Hep3Vector_rotate(*args)
    def __getitem__(*args): return libasp_skymaps.Hep3Vector___getitem__(*args)
    def __len__(*args): return libasp_skymaps.Hep3Vector___len__(*args)
Hep3Vector_swigregister = libasp_skymaps.Hep3Vector_swigregister
Hep3Vector_swigregister(Hep3Vector)
Hep3Vector_setTolerance = libasp_skymaps.Hep3Vector_setTolerance
Hep3Vector_getTolerance = libasp_skymaps.Hep3Vector_getTolerance

rotationXOf = libasp_skymaps.rotationXOf
rotationYOf = libasp_skymaps.rotationYOf
rotationZOf = libasp_skymaps.rotationZOf
__lshift__ = libasp_skymaps.__lshift__
__rshift__ = libasp_skymaps.__rshift__
__div__ = libasp_skymaps.__div__
__add__ = libasp_skymaps.__add__
__sub__ = libasp_skymaps.__sub__
class HepRotation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HepRotation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HepRotation, name)
    __repr__ = _swig_repr
    def __getitem__(*args): return libasp_skymaps.HepRotation___getitem__(*args)
    def __len__(*args): return libasp_skymaps.HepRotation___len__(*args)
    def __init__(self, *args, **kwargs): 
        this = libasp_skymaps.new_HepRotation(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libasp_skymaps.delete_HepRotation
    __del__ = lambda self : None;
HepRotation_swigregister = libasp_skymaps.HepRotation_swigregister
HepRotation_swigregister(HepRotation)
rotationOf = libasp_skymaps.rotationOf
cvar = libasp_skymaps.cvar
HepXHat = cvar.HepXHat
HepYHat = cvar.HepYHat
HepZHat = cvar.HepZHat
__mul__ = libasp_skymaps.__mul__

class SkyProj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SkyProj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SkyProj, name)
    __repr__ = _swig_repr
    __swig_destroy__ = libasp_skymaps.delete_SkyProj
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = libasp_skymaps.new_SkyProj(*args)
        try: self.this.append(this)
        except: self.this = this
    def sph2pix(*args): return libasp_skymaps.SkyProj_sph2pix(*args)
    def pix2pix(*args): return libasp_skymaps.SkyProj_pix2pix(*args)
    def pix2sph(*args): return libasp_skymaps.SkyProj_pix2sph(*args)
    def isGalactic(*args): return libasp_skymaps.SkyProj_isGalactic(*args)
    def range(*args): return libasp_skymaps.SkyProj_range(*args)
    def testpix2sph(*args): return libasp_skymaps.SkyProj_testpix2sph(*args)
    def setKeywords(*args): return libasp_skymaps.SkyProj_setKeywords(*args)
    def projType(*args): return libasp_skymaps.SkyProj_projType(*args)
SkyProj_swigregister = libasp_skymaps.SkyProj_swigregister
SkyProj_swigregister(SkyProj)

class SkyDir(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SkyDir, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SkyDir, name)
    __repr__ = _swig_repr
    GALACTIC = libasp_skymaps.SkyDir_GALACTIC
    EQUATORIAL = libasp_skymaps.SkyDir_EQUATORIAL
    def __init__(self, *args): 
        this = libasp_skymaps.new_SkyDir(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return libasp_skymaps.SkyDir___call__(*args)
    def l(*args): return libasp_skymaps.SkyDir_l(*args)
    def b(*args): return libasp_skymaps.SkyDir_b(*args)
    def ra(*args): return libasp_skymaps.SkyDir_ra(*args)
    def dec(*args): return libasp_skymaps.SkyDir_dec(*args)
    def dir(*args): return libasp_skymaps.SkyDir_dir(*args)
    def difference(*args): return libasp_skymaps.SkyDir_difference(*args)
    def project(*args): return libasp_skymaps.SkyDir_project(*args)
    def isValid(*args): return libasp_skymaps.SkyDir_isValid(*args)
    def zenithCoords(*args): return libasp_skymaps.SkyDir_zenithCoords(*args)
    def __getitem__(*args): return libasp_skymaps.SkyDir___getitem__(*args)
    def __len__(*args): return libasp_skymaps.SkyDir___len__(*args)
    __swig_destroy__ = libasp_skymaps.delete_SkyDir
    __del__ = lambda self : None;
SkyDir_swigregister = libasp_skymaps.SkyDir_swigregister
SkyDir_swigregister(SkyDir)

class Photon(SkyDir):
    __swig_setmethods__ = {}
    for _s in [SkyDir]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Photon, name, value)
    __swig_getmethods__ = {}
    for _s in [SkyDir]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Photon, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libasp_skymaps.new_Photon(*args)
        try: self.this.append(this)
        except: self.this = this
    def energy(*args): return libasp_skymaps.Photon_energy(*args)
    def eventClass(*args): return libasp_skymaps.Photon_eventClass(*args)
    def time(*args): return libasp_skymaps.Photon_time(*args)
    def source(*args): return libasp_skymaps.Photon_source(*args)
    __swig_destroy__ = libasp_skymaps.delete_Photon
    __del__ = lambda self : None;
Photon_swigregister = libasp_skymaps.Photon_swigregister
Photon_swigregister(Photon)

class Healpix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Healpix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Healpix, name)
    __repr__ = _swig_repr
    RING = libasp_skymaps.Healpix_RING
    NESTED = libasp_skymaps.Healpix_NESTED
    NEST = libasp_skymaps.Healpix_NEST
    def __init__(self, *args): 
        this = libasp_skymaps.new_Healpix(*args)
        try: self.this.append(this)
        except: self.this = this
    def nside(*args): return libasp_skymaps.Healpix_nside(*args)
    def npix(*args): return libasp_skymaps.Healpix_npix(*args)
    def size(*args): return libasp_skymaps.Healpix_size(*args)
    def pixelArea(*args): return libasp_skymaps.Healpix_pixelArea(*args)
    def ord(*args): return libasp_skymaps.Healpix_ord(*args)
    def nested(*args): return libasp_skymaps.Healpix_nested(*args)
    def coordsys(*args): return libasp_skymaps.Healpix_coordsys(*args)
    def galactic(*args): return libasp_skymaps.Healpix_galactic(*args)
    def findNeighbors(*args): return libasp_skymaps.Healpix_findNeighbors(*args)
    def query_disc(*args): return libasp_skymaps.Healpix_query_disc(*args)
    def pix2ang(*args): return libasp_skymaps.Healpix_pix2ang(*args)
    def ang2pix(*args): return libasp_skymaps.Healpix_ang2pix(*args)
    __swig_destroy__ = libasp_skymaps.delete_Healpix
    __del__ = lambda self : None;
Healpix_swigregister = libasp_skymaps.Healpix_swigregister
Healpix_swigregister(Healpix)

class HealpixMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HealpixMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HealpixMap, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libasp_skymaps.new_HealpixMap(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libasp_skymaps.delete_HealpixMap
    __del__ = lambda self : None;
    def save(*args): return libasp_skymaps.HealpixMap_save(*args)
    def load(*args): return libasp_skymaps.HealpixMap_load(*args)
    def level(*args): return libasp_skymaps.HealpixMap_level(*args)
    def __getitem__(*args): return libasp_skymaps.HealpixMap___getitem__(*args)
    def __call__(*args): return libasp_skymaps.HealpixMap___call__(*args)
    def __len__(*args): return libasp_skymaps.HealpixMap___len__(*args)
HealpixMap_swigregister = libasp_skymaps.HealpixMap_swigregister
HealpixMap_swigregister(HealpixMap)

class BinnedPhotonData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinnedPhotonData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BinnedPhotonData, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libasp_skymaps.new_BinnedPhotonData(*args)
        try: self.this.append(this)
        except: self.this = this
    def value(*args): return libasp_skymaps.BinnedPhotonData_value(*args)
    def integral(*args): return libasp_skymaps.BinnedPhotonData_integral(*args)
    def addPhoton(*args): return libasp_skymaps.BinnedPhotonData_addPhoton(*args)
    def add(*args): return libasp_skymaps.BinnedPhotonData_add(*args)
    def density(*args): return libasp_skymaps.BinnedPhotonData_density(*args)
    def smoothDensity(*args): return libasp_skymaps.BinnedPhotonData_smoothDensity(*args)
    def info(*args): return libasp_skymaps.BinnedPhotonData_info(*args)
    def write(*args): return libasp_skymaps.BinnedPhotonData_write(*args)
    def addgti(*args): return libasp_skymaps.BinnedPhotonData_addgti(*args)
    def writegti(*args): return libasp_skymaps.BinnedPhotonData_writegti(*args)
    def gti(*args): return libasp_skymaps.BinnedPhotonData_gti(*args)
    def photonCount(*args): return libasp_skymaps.BinnedPhotonData_photonCount(*args)
    def pixelCount(*args): return libasp_skymaps.BinnedPhotonData_pixelCount(*args)
    def __getitem__(*args): return libasp_skymaps.BinnedPhotonData___getitem__(*args)
    def __len__(*args): return libasp_skymaps.BinnedPhotonData___len__(*args)
    __swig_destroy__ = libasp_skymaps.delete_BinnedPhotonData
    __del__ = lambda self : None;
BinnedPhotonData_swigregister = libasp_skymaps.BinnedPhotonData_swigregister
BinnedPhotonData_swigregister(BinnedPhotonData)

class PhotonMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PhotonMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PhotonMap, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libasp_skymaps.new_PhotonMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def value(*args): return libasp_skymaps.PhotonMap_value(*args)
    def integral(*args): return libasp_skymaps.PhotonMap_integral(*args)
    def name(*args): return libasp_skymaps.PhotonMap_name(*args)
    def setName(*args): return libasp_skymaps.PhotonMap_setName(*args)
    def addPhoton(*args): return libasp_skymaps.PhotonMap_addPhoton(*args)
    def addPixel(*args): return libasp_skymaps.PhotonMap_addPixel(*args)
    def density(*args): return libasp_skymaps.PhotonMap_density(*args)
    def __call__(*args): return libasp_skymaps.PhotonMap___call__(*args)
    def pixel(*args): return libasp_skymaps.PhotonMap_pixel(*args)
    def extract(*args): return libasp_skymaps.PhotonMap_extract(*args)
    def extract_level(*args): return libasp_skymaps.PhotonMap_extract_level(*args)
    def photonCount(*args): return libasp_skymaps.PhotonMap_photonCount(*args)
    def pixelCount(*args): return libasp_skymaps.PhotonMap_pixelCount(*args)
    def minLevel(*args): return libasp_skymaps.PhotonMap_minLevel(*args)
    def levels(*args): return libasp_skymaps.PhotonMap_levels(*args)
    def energyBins(*args): return libasp_skymaps.PhotonMap_energyBins(*args)
    def write(*args): return libasp_skymaps.PhotonMap_write(*args)
    def addgti(*args): return libasp_skymaps.PhotonMap_addgti(*args)
    def writegti(*args): return libasp_skymaps.PhotonMap_writegti(*args)
    def gti(*args): return libasp_skymaps.PhotonMap_gti(*args)
    __swig_destroy__ = libasp_skymaps.delete_PhotonMap
    __del__ = lambda self : None;
PhotonMap_swigregister = libasp_skymaps.PhotonMap_swigregister
PhotonMap_swigregister(PhotonMap)

class SkyImage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SkyImage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SkyImage, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libasp_skymaps.new_SkyImage(*args)
        try: self.this.append(this)
        except: self.this = this
    def addPoint(*args): return libasp_skymaps.SkyImage_addPoint(*args)
    def save(*args): return libasp_skymaps.SkyImage_save(*args)
    __swig_destroy__ = libasp_skymaps.delete_SkyImage
    __del__ = lambda self : None;
    def setLayer(*args): return libasp_skymaps.SkyImage_setLayer(*args)
    def getEnergies(*args): return libasp_skymaps.SkyImage_getEnergies(*args)
    def energies(*args): return libasp_skymaps.SkyImage_energies(*args)
    def setEnergies(*args): return libasp_skymaps.SkyImage_setEnergies(*args)
    def fill(*args): return libasp_skymaps.SkyImage_fill(*args)
    def clear(*args): return libasp_skymaps.SkyImage_clear(*args)
    def total(*args): return libasp_skymaps.SkyImage_total(*args)
    def minimum(*args): return libasp_skymaps.SkyImage_minimum(*args)
    def maximum(*args): return libasp_skymaps.SkyImage_maximum(*args)
    def count(*args): return libasp_skymaps.SkyImage_count(*args)
    def pixelValue(*args): return libasp_skymaps.SkyImage_pixelValue(*args)
    def getNeighbors(*args): return libasp_skymaps.SkyImage_getNeighbors(*args)
    def __call__(*args): return libasp_skymaps.SkyImage___call__(*args)
    def layers(*args): return libasp_skymaps.SkyImage_layers(*args)
    def projector(*args): return libasp_skymaps.SkyImage_projector(*args)
    def setupImage(*args): return libasp_skymaps.SkyImage_setupImage(*args)
    def naxis1(*args): return libasp_skymaps.SkyImage_naxis1(*args)
    def naxis2(*args): return libasp_skymaps.SkyImage_naxis2(*args)
    def image(*args): return libasp_skymaps.SkyImage_image(*args)
    def reimage(*args): return libasp_skymaps.SkyImage_reimage(*args)
    __swig_getmethods__["setNaN"] = lambda x: libasp_skymaps.SkyImage_setNaN
    if _newclass:setNaN = staticmethod(libasp_skymaps.SkyImage_setNaN)
SkyImage_swigregister = libasp_skymaps.SkyImage_swigregister
SkyImage_swigregister(SkyImage)
SkyImage_setNaN = libasp_skymaps.SkyImage_setNaN

class Convolution(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Convolution, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Convolution, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libasp_skymaps.new_Convolution(*args)
        try: self.this.append(this)
        except: self.this = this
    def createConv(*args): return libasp_skymaps.Convolution_createConv(*args)
    def layer(*args): return libasp_skymaps.Convolution_layer(*args)
    def value(*args): return libasp_skymaps.Convolution_value(*args)
    def integral(*args): return libasp_skymaps.Convolution_integral(*args)
    def name(*args): return libasp_skymaps.Convolution_name(*args)
    __swig_destroy__ = libasp_skymaps.delete_Convolution
    __del__ = lambda self : None;
Convolution_swigregister = libasp_skymaps.Convolution_swigregister
Convolution_swigregister(Convolution)

class PsfFunction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PsfFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PsfFunction, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libasp_skymaps.new_PsfFunction(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return libasp_skymaps.PsfFunction___call__(*args)
    def gamma(*args): return libasp_skymaps.PsfFunction_gamma(*args)
    def integral(*args): return libasp_skymaps.PsfFunction_integral(*args)
    def integralSquare(*args): return libasp_skymaps.PsfFunction_integralSquare(*args)
    def mc(*args): return libasp_skymaps.PsfFunction_mc(*args)
    __swig_destroy__ = libasp_skymaps.delete_PsfFunction
    __del__ = lambda self : None;
PsfFunction_swigregister = libasp_skymaps.PsfFunction_swigregister
PsfFunction_swigregister(PsfFunction)

class PySkyFunction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySkyFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySkyFunction, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libasp_skymaps.new_PySkyFunction(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return libasp_skymaps.PySkyFunction___call__(*args)
    __swig_destroy__ = libasp_skymaps.delete_PySkyFunction
    __del__ = lambda self : None;
PySkyFunction_swigregister = libasp_skymaps.PySkyFunction_swigregister
PySkyFunction_swigregister(PySkyFunction)

class Background(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Background, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Background, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libasp_skymaps.new_Background(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libasp_skymaps.delete_Background
    __del__ = lambda self : None;
    def value(*args): return libasp_skymaps.Background_value(*args)
    def band_value(*args): return libasp_skymaps.Background_band_value(*args)
    def integral(*args): return libasp_skymaps.Background_integral(*args)
    def set_event_class(*args): return libasp_skymaps.Background_set_event_class(*args)
    def exposures(*args): return libasp_skymaps.Background_exposures(*args)
    def name(*args): return libasp_skymaps.Background_name(*args)
    __swig_getmethods__["set_simpson"] = lambda x: libasp_skymaps.Background_set_simpson
    if _newclass:set_simpson = staticmethod(libasp_skymaps.Background_set_simpson)
Background_swigregister = libasp_skymaps.Background_swigregister
Background_swigregister(Background)
Background_set_simpson = libasp_skymaps.Background_set_simpson

class Band(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Band, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Band, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libasp_skymaps.new_Band(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return libasp_skymaps.Band___call__(*args)
    def add(*args): return libasp_skymaps.Band_add(*args)
    def dir(*args): return libasp_skymaps.Band_dir(*args)
    def index(*args): return libasp_skymaps.Band_index(*args)
    def query_disk(*args): return libasp_skymaps.Band_query_disk(*args)
    def findNeighbors(*args): return libasp_skymaps.Band_findNeighbors(*args)
    def pixelArea(*args): return libasp_skymaps.Band_pixelArea(*args)
    def photons(*args): return libasp_skymaps.Band_photons(*args)
    def nside(*args): return libasp_skymaps.Band_nside(*args)
    def event_class(*args): return libasp_skymaps.Band_event_class(*args)
    def emin(*args): return libasp_skymaps.Band_emin(*args)
    def emax(*args): return libasp_skymaps.Band_emax(*args)
    def sigma(*args): return libasp_skymaps.Band_sigma(*args)
    def gamma(*args): return libasp_skymaps.Band_gamma(*args)
    def setSigma(*args): return libasp_skymaps.Band_setSigma(*args)
    def setGamma(*args): return libasp_skymaps.Band_setGamma(*args)
    def begin(*args): return libasp_skymaps.Band_begin(*args)
    def end(*args): return libasp_skymaps.Band_end(*args)
    def size(*args): return libasp_skymaps.Band_size(*args)
    __swig_destroy__ = libasp_skymaps.delete_Band
    __del__ = lambda self : None;
Band_swigregister = libasp_skymaps.Band_swigregister
Band_swigregister(Band)

class WeightedSkyDir(SkyDir):
    __swig_setmethods__ = {}
    for _s in [SkyDir]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WeightedSkyDir, name, value)
    __swig_getmethods__ = {}
    for _s in [SkyDir]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WeightedSkyDir, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libasp_skymaps.new_WeightedSkyDir(*args)
        try: self.this.append(this)
        except: self.this = this
    def weight(*args): return libasp_skymaps.WeightedSkyDir_weight(*args)
    __swig_destroy__ = libasp_skymaps.delete_WeightedSkyDir
    __del__ = lambda self : None;
WeightedSkyDir_swigregister = libasp_skymaps.WeightedSkyDir_swigregister
WeightedSkyDir_swigregister(WeightedSkyDir)

class WeightedSkyDirList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WeightedSkyDirList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WeightedSkyDirList, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libasp_skymaps.new_WeightedSkyDirList(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return libasp_skymaps.WeightedSkyDirList___call__(*args)
    def __getitem__(*args): return libasp_skymaps.WeightedSkyDirList___getitem__(*args)
    def __len__(*args): return libasp_skymaps.WeightedSkyDirList___len__(*args)
    __swig_destroy__ = libasp_skymaps.delete_WeightedSkyDirList
    __del__ = lambda self : None;
WeightedSkyDirList_swigregister = libasp_skymaps.WeightedSkyDirList_swigregister
WeightedSkyDirList_swigregister(WeightedSkyDirList)

class PhotonBinner(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PhotonBinner, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PhotonBinner, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libasp_skymaps.new_PhotonBinner(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libasp_skymaps.delete_PhotonBinner
    __del__ = lambda self : None;
    def __call__(*args): return libasp_skymaps.PhotonBinner___call__(*args)
PhotonBinner_swigregister = libasp_skymaps.PhotonBinner_swigregister
PhotonBinner_swigregister(PhotonBinner)

class Gti(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Gti, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Gti, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libasp_skymaps.new_Gti(*args)
        try: self.this.append(this)
        except: self.this = this
    def accept(*args): return libasp_skymaps.Gti_accept(*args)
    def writeExtension(*args): return libasp_skymaps.Gti_writeExtension(*args)
    def applyTimeRangeCut(*args): return libasp_skymaps.Gti_applyTimeRangeCut(*args)
    def minValue(*args): return libasp_skymaps.Gti_minValue(*args)
    def maxValue(*args): return libasp_skymaps.Gti_maxValue(*args)
    def computeOntime(*args): return libasp_skymaps.Gti_computeOntime(*args)
    def insertInterval(*args): return libasp_skymaps.Gti_insertInterval(*args)
    __swig_destroy__ = libasp_skymaps.delete_Gti
    __del__ = lambda self : None;
Gti_swigregister = libasp_skymaps.Gti_swigregister
Gti_swigregister(Gti)

class HealpixDiffuseFunc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HealpixDiffuseFunc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HealpixDiffuseFunc, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libasp_skymaps.new_HealpixDiffuseFunc(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libasp_skymaps.delete_HealpixDiffuseFunc
    __del__ = lambda self : None;
    def isotropicFlux(*args): return libasp_skymaps.HealpixDiffuseFunc_isotropicFlux(*args)
    def value(*args): return libasp_skymaps.HealpixDiffuseFunc_value(*args)
    def name(*args): return libasp_skymaps.HealpixDiffuseFunc_name(*args)
    def integral(*args): return libasp_skymaps.HealpixDiffuseFunc_integral(*args)
    def layers(*args): return libasp_skymaps.HealpixDiffuseFunc_layers(*args)
HealpixDiffuseFunc_swigregister = libasp_skymaps.HealpixDiffuseFunc_swigregister
HealpixDiffuseFunc_swigregister(HealpixDiffuseFunc)

class DiffuseFunction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiffuseFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DiffuseFunction, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = libasp_skymaps.new_DiffuseFunction(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libasp_skymaps.delete_DiffuseFunction
    __del__ = lambda self : None;
    def extraGal(*args, **kwargs): return libasp_skymaps.DiffuseFunction_extraGal(*args, **kwargs)
    def value(*args, **kwargs): return libasp_skymaps.DiffuseFunction_value(*args, **kwargs)
    def integral(*args, **kwargs): return libasp_skymaps.DiffuseFunction_integral(*args, **kwargs)
    def name(*args, **kwargs): return libasp_skymaps.DiffuseFunction_name(*args, **kwargs)
    def integrals(*args, **kwargs): return libasp_skymaps.DiffuseFunction_integrals(*args, **kwargs)
    def layers(*args, **kwargs): return libasp_skymaps.DiffuseFunction_layers(*args, **kwargs)
    def image(*args, **kwargs): return libasp_skymaps.DiffuseFunction_image(*args, **kwargs)
DiffuseFunction_swigregister = libasp_skymaps.DiffuseFunction_swigregister
DiffuseFunction_swigregister(DiffuseFunction)

class LivetimeCube(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LivetimeCube, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LivetimeCube, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = libasp_skymaps.new_LivetimeCube(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    def fill(*args, **kwargs): return libasp_skymaps.LivetimeCube_fill(*args, **kwargs)
    def write(*args, **kwargs): return libasp_skymaps.LivetimeCube_write(*args, **kwargs)
    def load(*args, **kwargs): return libasp_skymaps.LivetimeCube_load(*args, **kwargs)
    def load_table(*args, **kwargs): return libasp_skymaps.LivetimeCube_load_table(*args, **kwargs)
    def lost(*args, **kwargs): return libasp_skymaps.LivetimeCube_lost(*args, **kwargs)
    def useZenith(*args, **kwargs): return libasp_skymaps.LivetimeCube_useZenith(*args, **kwargs)
    def value(*args, **kwargs): return libasp_skymaps.LivetimeCube_value(*args, **kwargs)
    def total(*args, **kwargs): return libasp_skymaps.LivetimeCube_total(*args, **kwargs)
    def gti(*args, **kwargs): return libasp_skymaps.LivetimeCube_gti(*args, **kwargs)
    __swig_destroy__ = libasp_skymaps.delete_LivetimeCube
    __del__ = lambda self : None;
LivetimeCube_swigregister = libasp_skymaps.LivetimeCube_swigregister
LivetimeCube_swigregister(LivetimeCube)

class Exposure(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Exposure, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Exposure, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = libasp_skymaps.new_Exposure(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libasp_skymaps.delete_Exposure
    __del__ = lambda self : None;
    def value(*args, **kwargs): return libasp_skymaps.Exposure_value(*args, **kwargs)
    def integral(*args, **kwargs): return libasp_skymaps.Exposure_integral(*args, **kwargs)
    def name(*args, **kwargs): return libasp_skymaps.Exposure_name(*args, **kwargs)
    def gti(*args, **kwargs): return libasp_skymaps.Exposure_gti(*args, **kwargs)
    __swig_getmethods__["set_simpson"] = lambda x: libasp_skymaps.Exposure_set_simpson
    if _newclass:set_simpson = staticmethod(libasp_skymaps.Exposure_set_simpson)
Exposure_swigregister = libasp_skymaps.Exposure_swigregister
Exposure_swigregister(Exposure)
Exposure_set_simpson = libasp_skymaps.Exposure_set_simpson

class ExposureMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExposureMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExposureMap, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = libasp_skymaps.new_ExposureMap(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args, **kwargs): return libasp_skymaps.ExposureMap___call__(*args, **kwargs)
    __swig_destroy__ = libasp_skymaps.delete_ExposureMap
    __del__ = lambda self : None;
ExposureMap_swigregister = libasp_skymaps.ExposureMap_swigregister
ExposureMap_swigregister(ExposureMap)

class EffectiveArea(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EffectiveArea, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EffectiveArea, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = libasp_skymaps.new_EffectiveArea(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libasp_skymaps.delete_EffectiveArea
    __del__ = lambda self : None;
    def value(*args, **kwargs): return libasp_skymaps.EffectiveArea_value(*args, **kwargs)
    def __call__(*args, **kwargs): return libasp_skymaps.EffectiveArea___call__(*args, **kwargs)
    __swig_getmethods__["set_CALDB"] = lambda x: libasp_skymaps.EffectiveArea_set_CALDB
    if _newclass:set_CALDB = staticmethod(libasp_skymaps.EffectiveArea_set_CALDB)
EffectiveArea_swigregister = libasp_skymaps.EffectiveArea_swigregister
EffectiveArea_swigregister(EffectiveArea)
EffectiveArea_set_CALDB = libasp_skymaps.EffectiveArea_set_CALDB

class IsotropicPowerLaw(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IsotropicPowerLaw, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IsotropicPowerLaw, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = libasp_skymaps.new_IsotropicPowerLaw(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libasp_skymaps.delete_IsotropicPowerLaw
    __del__ = lambda self : None;
    def value(*args, **kwargs): return libasp_skymaps.IsotropicPowerLaw_value(*args, **kwargs)
    def integral(*args, **kwargs): return libasp_skymaps.IsotropicPowerLaw_integral(*args, **kwargs)
IsotropicPowerLaw_swigregister = libasp_skymaps.IsotropicPowerLaw_swigregister
IsotropicPowerLaw_swigregister(IsotropicPowerLaw)

class IParams(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IParams, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_getmethods__["sigma"] = lambda x: libasp_skymaps.IParams_sigma
    if _newclass:sigma = staticmethod(libasp_skymaps.IParams_sigma)
    __swig_getmethods__["gamma"] = lambda x: libasp_skymaps.IParams_gamma
    if _newclass:gamma = staticmethod(libasp_skymaps.IParams_gamma)
    __swig_getmethods__["set_fp"] = lambda x: libasp_skymaps.IParams_set_fp
    if _newclass:set_fp = staticmethod(libasp_skymaps.IParams_set_fp)
    __swig_getmethods__["set_bp"] = lambda x: libasp_skymaps.IParams_set_bp
    if _newclass:set_bp = staticmethod(libasp_skymaps.IParams_set_bp)
    __swig_getmethods__["set_fgam"] = lambda x: libasp_skymaps.IParams_set_fgam
    if _newclass:set_fgam = staticmethod(libasp_skymaps.IParams_set_fgam)
    __swig_getmethods__["set_bgam"] = lambda x: libasp_skymaps.IParams_set_bgam
    if _newclass:set_bgam = staticmethod(libasp_skymaps.IParams_set_bgam)
    __swig_getmethods__["set_elist"] = lambda x: libasp_skymaps.IParams_set_elist
    if _newclass:set_elist = staticmethod(libasp_skymaps.IParams_set_elist)
    __swig_getmethods__["init"] = lambda x: libasp_skymaps.IParams_init
    if _newclass:init = staticmethod(libasp_skymaps.IParams_init)
    __swig_getmethods__["params"] = lambda x: libasp_skymaps.IParams_params
    if _newclass:params = staticmethod(libasp_skymaps.IParams_params)
    __swig_destroy__ = libasp_skymaps.delete_IParams
    __del__ = lambda self : None;
IParams_swigregister = libasp_skymaps.IParams_swigregister
IParams_swigregister(IParams)
IParams_sigma = libasp_skymaps.IParams_sigma
IParams_gamma = libasp_skymaps.IParams_gamma
IParams_set_fp = libasp_skymaps.IParams_set_fp
IParams_set_bp = libasp_skymaps.IParams_set_bp
IParams_set_fgam = libasp_skymaps.IParams_set_fgam
IParams_set_bgam = libasp_skymaps.IParams_set_bgam
IParams_set_elist = libasp_skymaps.IParams_set_elist
IParams_init = libasp_skymaps.IParams_init
IParams_params = libasp_skymaps.IParams_params

class CompositeSkySpectrum(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompositeSkySpectrum, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CompositeSkySpectrum, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = libasp_skymaps.new_CompositeSkySpectrum(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    def add(*args, **kwargs): return libasp_skymaps.CompositeSkySpectrum_add(*args, **kwargs)
    def value(*args, **kwargs): return libasp_skymaps.CompositeSkySpectrum_value(*args, **kwargs)
    def band_value(*args, **kwargs): return libasp_skymaps.CompositeSkySpectrum_band_value(*args, **kwargs)
    def integral(*args, **kwargs): return libasp_skymaps.CompositeSkySpectrum_integral(*args, **kwargs)
    def name(*args, **kwargs): return libasp_skymaps.CompositeSkySpectrum_name(*args, **kwargs)
    def setName(*args, **kwargs): return libasp_skymaps.CompositeSkySpectrum_setName(*args, **kwargs)
    def average(*args, **kwargs): return libasp_skymaps.CompositeSkySpectrum_average(*args, **kwargs)
    __swig_destroy__ = libasp_skymaps.delete_CompositeSkySpectrum
    __del__ = lambda self : None;
CompositeSkySpectrum_swigregister = libasp_skymaps.CompositeSkySpectrum_swigregister
CompositeSkySpectrum_swigregister(CompositeSkySpectrum)

class CompositeSkyFunction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompositeSkyFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CompositeSkyFunction, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = libasp_skymaps.new_CompositeSkyFunction(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    def add(*args, **kwargs): return libasp_skymaps.CompositeSkyFunction_add(*args, **kwargs)
    def __call__(*args, **kwargs): return libasp_skymaps.CompositeSkyFunction___call__(*args, **kwargs)
    def average(*args): return libasp_skymaps.CompositeSkyFunction_average(*args)
    __swig_destroy__ = libasp_skymaps.delete_CompositeSkyFunction
    __del__ = lambda self : None;
CompositeSkyFunction_swigregister = libasp_skymaps.CompositeSkyFunction_swigregister
CompositeSkyFunction_swigregister(CompositeSkyFunction)



