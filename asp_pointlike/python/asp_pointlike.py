# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

"""
Interface to pointlike
"""

import libasp_pointlike
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class PySwigIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = libasp_pointlike.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return libasp_pointlike.PySwigIterator_value(*args)
    def incr(*args): return libasp_pointlike.PySwigIterator_incr(*args)
    def decr(*args): return libasp_pointlike.PySwigIterator_decr(*args)
    def distance(*args): return libasp_pointlike.PySwigIterator_distance(*args)
    def equal(*args): return libasp_pointlike.PySwigIterator_equal(*args)
    def copy(*args): return libasp_pointlike.PySwigIterator_copy(*args)
    def next(*args): return libasp_pointlike.PySwigIterator_next(*args)
    def previous(*args): return libasp_pointlike.PySwigIterator_previous(*args)
    def advance(*args): return libasp_pointlike.PySwigIterator_advance(*args)
    def __eq__(*args): return libasp_pointlike.PySwigIterator___eq__(*args)
    def __ne__(*args): return libasp_pointlike.PySwigIterator___ne__(*args)
    def __iadd__(*args): return libasp_pointlike.PySwigIterator___iadd__(*args)
    def __isub__(*args): return libasp_pointlike.PySwigIterator___isub__(*args)
    def __add__(*args): return libasp_pointlike.PySwigIterator___add__(*args)
    def __sub__(*args): return libasp_pointlike.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = libasp_pointlike.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class DoublePair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoublePair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoublePair, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libasp_pointlike.new_DoublePair(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = libasp_pointlike.DoublePair_first_set
    __swig_getmethods__["first"] = libasp_pointlike.DoublePair_first_get
    if _newclass:first = _swig_property(libasp_pointlike.DoublePair_first_get, libasp_pointlike.DoublePair_first_set)
    __swig_setmethods__["second"] = libasp_pointlike.DoublePair_second_set
    __swig_getmethods__["second"] = libasp_pointlike.DoublePair_second_get
    if _newclass:second = _swig_property(libasp_pointlike.DoublePair_second_get, libasp_pointlike.DoublePair_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = libasp_pointlike.delete_DoublePair
    __del__ = lambda self : None;
DoublePair_swigregister = libasp_pointlike.DoublePair_swigregister
DoublePair_swigregister(DoublePair)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return libasp_pointlike.StringVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return libasp_pointlike.StringVector___nonzero__(*args)
    def __len__(*args): return libasp_pointlike.StringVector___len__(*args)
    def pop(*args): return libasp_pointlike.StringVector_pop(*args)
    def __getslice__(*args): return libasp_pointlike.StringVector___getslice__(*args)
    def __setslice__(*args): return libasp_pointlike.StringVector___setslice__(*args)
    def __delslice__(*args): return libasp_pointlike.StringVector___delslice__(*args)
    def __delitem__(*args): return libasp_pointlike.StringVector___delitem__(*args)
    def __getitem__(*args): return libasp_pointlike.StringVector___getitem__(*args)
    def __setitem__(*args): return libasp_pointlike.StringVector___setitem__(*args)
    def append(*args): return libasp_pointlike.StringVector_append(*args)
    def empty(*args): return libasp_pointlike.StringVector_empty(*args)
    def size(*args): return libasp_pointlike.StringVector_size(*args)
    def clear(*args): return libasp_pointlike.StringVector_clear(*args)
    def swap(*args): return libasp_pointlike.StringVector_swap(*args)
    def get_allocator(*args): return libasp_pointlike.StringVector_get_allocator(*args)
    def begin(*args): return libasp_pointlike.StringVector_begin(*args)
    def end(*args): return libasp_pointlike.StringVector_end(*args)
    def rbegin(*args): return libasp_pointlike.StringVector_rbegin(*args)
    def rend(*args): return libasp_pointlike.StringVector_rend(*args)
    def pop_back(*args): return libasp_pointlike.StringVector_pop_back(*args)
    def erase(*args): return libasp_pointlike.StringVector_erase(*args)
    def __init__(self, *args): 
        this = libasp_pointlike.new_StringVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return libasp_pointlike.StringVector_push_back(*args)
    def front(*args): return libasp_pointlike.StringVector_front(*args)
    def back(*args): return libasp_pointlike.StringVector_back(*args)
    def assign(*args): return libasp_pointlike.StringVector_assign(*args)
    def resize(*args): return libasp_pointlike.StringVector_resize(*args)
    def insert(*args): return libasp_pointlike.StringVector_insert(*args)
    def reserve(*args): return libasp_pointlike.StringVector_reserve(*args)
    def capacity(*args): return libasp_pointlike.StringVector_capacity(*args)
    __swig_destroy__ = libasp_pointlike.delete_StringVector
    __del__ = lambda self : None;
StringVector_swigregister = libasp_pointlike.StringVector_swigregister
StringVector_swigregister(StringVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return libasp_pointlike.DoubleVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return libasp_pointlike.DoubleVector___nonzero__(*args)
    def __len__(*args): return libasp_pointlike.DoubleVector___len__(*args)
    def pop(*args): return libasp_pointlike.DoubleVector_pop(*args)
    def __getslice__(*args): return libasp_pointlike.DoubleVector___getslice__(*args)
    def __setslice__(*args): return libasp_pointlike.DoubleVector___setslice__(*args)
    def __delslice__(*args): return libasp_pointlike.DoubleVector___delslice__(*args)
    def __delitem__(*args): return libasp_pointlike.DoubleVector___delitem__(*args)
    def __getitem__(*args): return libasp_pointlike.DoubleVector___getitem__(*args)
    def __setitem__(*args): return libasp_pointlike.DoubleVector___setitem__(*args)
    def append(*args): return libasp_pointlike.DoubleVector_append(*args)
    def empty(*args): return libasp_pointlike.DoubleVector_empty(*args)
    def size(*args): return libasp_pointlike.DoubleVector_size(*args)
    def clear(*args): return libasp_pointlike.DoubleVector_clear(*args)
    def swap(*args): return libasp_pointlike.DoubleVector_swap(*args)
    def get_allocator(*args): return libasp_pointlike.DoubleVector_get_allocator(*args)
    def begin(*args): return libasp_pointlike.DoubleVector_begin(*args)
    def end(*args): return libasp_pointlike.DoubleVector_end(*args)
    def rbegin(*args): return libasp_pointlike.DoubleVector_rbegin(*args)
    def rend(*args): return libasp_pointlike.DoubleVector_rend(*args)
    def pop_back(*args): return libasp_pointlike.DoubleVector_pop_back(*args)
    def erase(*args): return libasp_pointlike.DoubleVector_erase(*args)
    def __init__(self, *args): 
        this = libasp_pointlike.new_DoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return libasp_pointlike.DoubleVector_push_back(*args)
    def front(*args): return libasp_pointlike.DoubleVector_front(*args)
    def back(*args): return libasp_pointlike.DoubleVector_back(*args)
    def assign(*args): return libasp_pointlike.DoubleVector_assign(*args)
    def resize(*args): return libasp_pointlike.DoubleVector_resize(*args)
    def insert(*args): return libasp_pointlike.DoubleVector_insert(*args)
    def reserve(*args): return libasp_pointlike.DoubleVector_reserve(*args)
    def capacity(*args): return libasp_pointlike.DoubleVector_capacity(*args)
    __swig_destroy__ = libasp_pointlike.delete_DoubleVector
    __del__ = lambda self : None;
DoubleVector_swigregister = libasp_pointlike.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class FloatVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return libasp_pointlike.FloatVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return libasp_pointlike.FloatVector___nonzero__(*args)
    def __len__(*args): return libasp_pointlike.FloatVector___len__(*args)
    def pop(*args): return libasp_pointlike.FloatVector_pop(*args)
    def __getslice__(*args): return libasp_pointlike.FloatVector___getslice__(*args)
    def __setslice__(*args): return libasp_pointlike.FloatVector___setslice__(*args)
    def __delslice__(*args): return libasp_pointlike.FloatVector___delslice__(*args)
    def __delitem__(*args): return libasp_pointlike.FloatVector___delitem__(*args)
    def __getitem__(*args): return libasp_pointlike.FloatVector___getitem__(*args)
    def __setitem__(*args): return libasp_pointlike.FloatVector___setitem__(*args)
    def append(*args): return libasp_pointlike.FloatVector_append(*args)
    def empty(*args): return libasp_pointlike.FloatVector_empty(*args)
    def size(*args): return libasp_pointlike.FloatVector_size(*args)
    def clear(*args): return libasp_pointlike.FloatVector_clear(*args)
    def swap(*args): return libasp_pointlike.FloatVector_swap(*args)
    def get_allocator(*args): return libasp_pointlike.FloatVector_get_allocator(*args)
    def begin(*args): return libasp_pointlike.FloatVector_begin(*args)
    def end(*args): return libasp_pointlike.FloatVector_end(*args)
    def rbegin(*args): return libasp_pointlike.FloatVector_rbegin(*args)
    def rend(*args): return libasp_pointlike.FloatVector_rend(*args)
    def pop_back(*args): return libasp_pointlike.FloatVector_pop_back(*args)
    def erase(*args): return libasp_pointlike.FloatVector_erase(*args)
    def __init__(self, *args): 
        this = libasp_pointlike.new_FloatVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return libasp_pointlike.FloatVector_push_back(*args)
    def front(*args): return libasp_pointlike.FloatVector_front(*args)
    def back(*args): return libasp_pointlike.FloatVector_back(*args)
    def assign(*args): return libasp_pointlike.FloatVector_assign(*args)
    def resize(*args): return libasp_pointlike.FloatVector_resize(*args)
    def insert(*args): return libasp_pointlike.FloatVector_insert(*args)
    def reserve(*args): return libasp_pointlike.FloatVector_reserve(*args)
    def capacity(*args): return libasp_pointlike.FloatVector_capacity(*args)
    __swig_destroy__ = libasp_pointlike.delete_FloatVector
    __del__ = lambda self : None;
FloatVector_swigregister = libasp_pointlike.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class LongVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LongVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LongVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return libasp_pointlike.LongVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return libasp_pointlike.LongVector___nonzero__(*args)
    def __len__(*args): return libasp_pointlike.LongVector___len__(*args)
    def pop(*args): return libasp_pointlike.LongVector_pop(*args)
    def __getslice__(*args): return libasp_pointlike.LongVector___getslice__(*args)
    def __setslice__(*args): return libasp_pointlike.LongVector___setslice__(*args)
    def __delslice__(*args): return libasp_pointlike.LongVector___delslice__(*args)
    def __delitem__(*args): return libasp_pointlike.LongVector___delitem__(*args)
    def __getitem__(*args): return libasp_pointlike.LongVector___getitem__(*args)
    def __setitem__(*args): return libasp_pointlike.LongVector___setitem__(*args)
    def append(*args): return libasp_pointlike.LongVector_append(*args)
    def empty(*args): return libasp_pointlike.LongVector_empty(*args)
    def size(*args): return libasp_pointlike.LongVector_size(*args)
    def clear(*args): return libasp_pointlike.LongVector_clear(*args)
    def swap(*args): return libasp_pointlike.LongVector_swap(*args)
    def get_allocator(*args): return libasp_pointlike.LongVector_get_allocator(*args)
    def begin(*args): return libasp_pointlike.LongVector_begin(*args)
    def end(*args): return libasp_pointlike.LongVector_end(*args)
    def rbegin(*args): return libasp_pointlike.LongVector_rbegin(*args)
    def rend(*args): return libasp_pointlike.LongVector_rend(*args)
    def pop_back(*args): return libasp_pointlike.LongVector_pop_back(*args)
    def erase(*args): return libasp_pointlike.LongVector_erase(*args)
    def __init__(self, *args): 
        this = libasp_pointlike.new_LongVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return libasp_pointlike.LongVector_push_back(*args)
    def front(*args): return libasp_pointlike.LongVector_front(*args)
    def back(*args): return libasp_pointlike.LongVector_back(*args)
    def assign(*args): return libasp_pointlike.LongVector_assign(*args)
    def resize(*args): return libasp_pointlike.LongVector_resize(*args)
    def insert(*args): return libasp_pointlike.LongVector_insert(*args)
    def reserve(*args): return libasp_pointlike.LongVector_reserve(*args)
    def capacity(*args): return libasp_pointlike.LongVector_capacity(*args)
    __swig_destroy__ = libasp_pointlike.delete_LongVector
    __del__ = lambda self : None;
LongVector_swigregister = libasp_pointlike.LongVector_swigregister
LongVector_swigregister(LongVector)

class Hep3Vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Hep3Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Hep3Vector, name)
    __repr__ = _swig_repr
    X = libasp_pointlike.Hep3Vector_X
    Y = libasp_pointlike.Hep3Vector_Y
    Z = libasp_pointlike.Hep3Vector_Z
    NUM_COORDINATES = libasp_pointlike.Hep3Vector_NUM_COORDINATES
    SIZE = libasp_pointlike.Hep3Vector_SIZE
    def __init__(self, *args): 
        this = libasp_pointlike.new_Hep3Vector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libasp_pointlike.delete_Hep3Vector
    __del__ = lambda self : None;
    def __call__(*args): return libasp_pointlike.Hep3Vector___call__(*args)
    def x(*args): return libasp_pointlike.Hep3Vector_x(*args)
    def y(*args): return libasp_pointlike.Hep3Vector_y(*args)
    def z(*args): return libasp_pointlike.Hep3Vector_z(*args)
    def setX(*args): return libasp_pointlike.Hep3Vector_setX(*args)
    def setY(*args): return libasp_pointlike.Hep3Vector_setY(*args)
    def setZ(*args): return libasp_pointlike.Hep3Vector_setZ(*args)
    def set(*args): return libasp_pointlike.Hep3Vector_set(*args)
    def phi(*args): return libasp_pointlike.Hep3Vector_phi(*args)
    def mag2(*args): return libasp_pointlike.Hep3Vector_mag2(*args)
    def mag(*args): return libasp_pointlike.Hep3Vector_mag(*args)
    def setPhi(*args): return libasp_pointlike.Hep3Vector_setPhi(*args)
    def setTheta(*args): return libasp_pointlike.Hep3Vector_setTheta(*args)
    def setMag(*args): return libasp_pointlike.Hep3Vector_setMag(*args)
    def setPerp(*args): return libasp_pointlike.Hep3Vector_setPerp(*args)
    def setCylTheta(*args): return libasp_pointlike.Hep3Vector_setCylTheta(*args)
    def perp2(*args): return libasp_pointlike.Hep3Vector_perp2(*args)
    def perp(*args): return libasp_pointlike.Hep3Vector_perp(*args)
    def __eq__(*args): return libasp_pointlike.Hep3Vector___eq__(*args)
    def __ne__(*args): return libasp_pointlike.Hep3Vector___ne__(*args)
    def isNear(*args): return libasp_pointlike.Hep3Vector_isNear(*args)
    def howNear(*args): return libasp_pointlike.Hep3Vector_howNear(*args)
    def deltaR(*args): return libasp_pointlike.Hep3Vector_deltaR(*args)
    def __iadd__(*args): return libasp_pointlike.Hep3Vector___iadd__(*args)
    def __isub__(*args): return libasp_pointlike.Hep3Vector___isub__(*args)
    def __neg__(*args): return libasp_pointlike.Hep3Vector___neg__(*args)
    def __idiv__(*args): return libasp_pointlike.Hep3Vector___idiv__(*args)
    def unit(*args): return libasp_pointlike.Hep3Vector_unit(*args)
    def orthogonal(*args): return libasp_pointlike.Hep3Vector_orthogonal(*args)
    def dot(*args): return libasp_pointlike.Hep3Vector_dot(*args)
    def cross(*args): return libasp_pointlike.Hep3Vector_cross(*args)
    def pseudoRapidity(*args): return libasp_pointlike.Hep3Vector_pseudoRapidity(*args)
    def setEta(*args): return libasp_pointlike.Hep3Vector_setEta(*args)
    def setCylEta(*args): return libasp_pointlike.Hep3Vector_setCylEta(*args)
    def rotateX(*args): return libasp_pointlike.Hep3Vector_rotateX(*args)
    def rotateY(*args): return libasp_pointlike.Hep3Vector_rotateY(*args)
    def rotateZ(*args): return libasp_pointlike.Hep3Vector_rotateZ(*args)
    def rotateUz(*args): return libasp_pointlike.Hep3Vector_rotateUz(*args)
    def __imul__(*args): return libasp_pointlike.Hep3Vector___imul__(*args)
    def transform(*args): return libasp_pointlike.Hep3Vector_transform(*args)
    def setRThetaPhi(*args): return libasp_pointlike.Hep3Vector_setRThetaPhi(*args)
    def setREtaPhi(*args): return libasp_pointlike.Hep3Vector_setREtaPhi(*args)
    def setRhoPhiZ(*args): return libasp_pointlike.Hep3Vector_setRhoPhiZ(*args)
    def setRhoPhiTheta(*args): return libasp_pointlike.Hep3Vector_setRhoPhiTheta(*args)
    def setRhoPhiEta(*args): return libasp_pointlike.Hep3Vector_setRhoPhiEta(*args)
    def getX(*args): return libasp_pointlike.Hep3Vector_getX(*args)
    def getY(*args): return libasp_pointlike.Hep3Vector_getY(*args)
    def getZ(*args): return libasp_pointlike.Hep3Vector_getZ(*args)
    def getR(*args): return libasp_pointlike.Hep3Vector_getR(*args)
    def getTheta(*args): return libasp_pointlike.Hep3Vector_getTheta(*args)
    def getPhi(*args): return libasp_pointlike.Hep3Vector_getPhi(*args)
    def r(*args): return libasp_pointlike.Hep3Vector_r(*args)
    def rho(*args): return libasp_pointlike.Hep3Vector_rho(*args)
    def getRho(*args): return libasp_pointlike.Hep3Vector_getRho(*args)
    def getEta(*args): return libasp_pointlike.Hep3Vector_getEta(*args)
    def setR(*args): return libasp_pointlike.Hep3Vector_setR(*args)
    def setRho(*args): return libasp_pointlike.Hep3Vector_setRho(*args)
    def compare(*args): return libasp_pointlike.Hep3Vector_compare(*args)
    def __gt__(*args): return libasp_pointlike.Hep3Vector___gt__(*args)
    def __lt__(*args): return libasp_pointlike.Hep3Vector___lt__(*args)
    def __ge__(*args): return libasp_pointlike.Hep3Vector___ge__(*args)
    def __le__(*args): return libasp_pointlike.Hep3Vector___le__(*args)
    def diff2(*args): return libasp_pointlike.Hep3Vector_diff2(*args)
    __swig_getmethods__["setTolerance"] = lambda x: libasp_pointlike.Hep3Vector_setTolerance
    if _newclass:setTolerance = staticmethod(libasp_pointlike.Hep3Vector_setTolerance)
    __swig_getmethods__["getTolerance"] = lambda x: libasp_pointlike.Hep3Vector_getTolerance
    if _newclass:getTolerance = staticmethod(libasp_pointlike.Hep3Vector_getTolerance)
    def isParallel(*args): return libasp_pointlike.Hep3Vector_isParallel(*args)
    def isOrthogonal(*args): return libasp_pointlike.Hep3Vector_isOrthogonal(*args)
    def howParallel(*args): return libasp_pointlike.Hep3Vector_howParallel(*args)
    def howOrthogonal(*args): return libasp_pointlike.Hep3Vector_howOrthogonal(*args)
    ToleranceTicks = libasp_pointlike.Hep3Vector_ToleranceTicks
    def beta(*args): return libasp_pointlike.Hep3Vector_beta(*args)
    def gamma(*args): return libasp_pointlike.Hep3Vector_gamma(*args)
    def coLinearRapidity(*args): return libasp_pointlike.Hep3Vector_coLinearRapidity(*args)
    def angle(*args): return libasp_pointlike.Hep3Vector_angle(*args)
    def theta(*args): return libasp_pointlike.Hep3Vector_theta(*args)
    def cosTheta(*args): return libasp_pointlike.Hep3Vector_cosTheta(*args)
    def cos2Theta(*args): return libasp_pointlike.Hep3Vector_cos2Theta(*args)
    def project(*args): return libasp_pointlike.Hep3Vector_project(*args)
    def perpPart(*args): return libasp_pointlike.Hep3Vector_perpPart(*args)
    def rapidity(*args): return libasp_pointlike.Hep3Vector_rapidity(*args)
    def eta(*args): return libasp_pointlike.Hep3Vector_eta(*args)
    def deltaPhi(*args): return libasp_pointlike.Hep3Vector_deltaPhi(*args)
    def polarAngle(*args): return libasp_pointlike.Hep3Vector_polarAngle(*args)
    def azimAngle(*args): return libasp_pointlike.Hep3Vector_azimAngle(*args)
    def rotate(*args): return libasp_pointlike.Hep3Vector_rotate(*args)
    def __getitem__(*args): return libasp_pointlike.Hep3Vector___getitem__(*args)
    def __len__(*args): return libasp_pointlike.Hep3Vector___len__(*args)
Hep3Vector_swigregister = libasp_pointlike.Hep3Vector_swigregister
Hep3Vector_swigregister(Hep3Vector)
Hep3Vector_setTolerance = libasp_pointlike.Hep3Vector_setTolerance
Hep3Vector_getTolerance = libasp_pointlike.Hep3Vector_getTolerance

rotationXOf = libasp_pointlike.rotationXOf
rotationYOf = libasp_pointlike.rotationYOf
rotationZOf = libasp_pointlike.rotationZOf
__lshift__ = libasp_pointlike.__lshift__
__rshift__ = libasp_pointlike.__rshift__
__div__ = libasp_pointlike.__div__
__add__ = libasp_pointlike.__add__
__sub__ = libasp_pointlike.__sub__
class HepRotation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HepRotation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HepRotation, name)
    __repr__ = _swig_repr
    def __getitem__(*args): return libasp_pointlike.HepRotation___getitem__(*args)
    def __len__(*args): return libasp_pointlike.HepRotation___len__(*args)
    def inverse(*args): return libasp_pointlike.HepRotation_inverse(*args)
    def __init__(self, *args): 
        this = libasp_pointlike.new_HepRotation(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libasp_pointlike.delete_HepRotation
    __del__ = lambda self : None;
HepRotation_swigregister = libasp_pointlike.HepRotation_swigregister
HepRotation_swigregister(HepRotation)
rotationOf = libasp_pointlike.rotationOf
cvar = libasp_pointlike.cvar
HepXHat = cvar.HepXHat
HepYHat = cvar.HepYHat
HepZHat = cvar.HepZHat
__mul__ = libasp_pointlike.__mul__

class SkyProj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SkyProj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SkyProj, name)
    __repr__ = _swig_repr
    __swig_destroy__ = libasp_pointlike.delete_SkyProj
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = libasp_pointlike.new_SkyProj(*args)
        try: self.this.append(this)
        except: self.this = this
    def sph2pix(*args): return libasp_pointlike.SkyProj_sph2pix(*args)
    def pix2pix(*args): return libasp_pointlike.SkyProj_pix2pix(*args)
    def pix2sph(*args): return libasp_pointlike.SkyProj_pix2sph(*args)
    def isGalactic(*args): return libasp_pointlike.SkyProj_isGalactic(*args)
    def range(*args): return libasp_pointlike.SkyProj_range(*args)
    def testpix2sph(*args): return libasp_pointlike.SkyProj_testpix2sph(*args)
    def setKeywords(*args): return libasp_pointlike.SkyProj_setKeywords(*args)
    def projType(*args): return libasp_pointlike.SkyProj_projType(*args)
SkyProj_swigregister = libasp_pointlike.SkyProj_swigregister
SkyProj_swigregister(SkyProj)

class SkyDir(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SkyDir, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SkyDir, name)
    __repr__ = _swig_repr
    GALACTIC = libasp_pointlike.SkyDir_GALACTIC
    EQUATORIAL = libasp_pointlike.SkyDir_EQUATORIAL
    def __call__(*args): return libasp_pointlike.SkyDir___call__(*args)
    def l(*args): return libasp_pointlike.SkyDir_l(*args)
    def b(*args): return libasp_pointlike.SkyDir_b(*args)
    def ra(*args): return libasp_pointlike.SkyDir_ra(*args)
    def dec(*args): return libasp_pointlike.SkyDir_dec(*args)
    def dir(*args): return libasp_pointlike.SkyDir_dir(*args)
    def difference(*args): return libasp_pointlike.SkyDir_difference(*args)
    def project(*args): return libasp_pointlike.SkyDir_project(*args)
    def isValid(*args): return libasp_pointlike.SkyDir_isValid(*args)
    def zenithCoords(*args): return libasp_pointlike.SkyDir_zenithCoords(*args)
    def __getitem__(*args): return libasp_pointlike.SkyDir___getitem__(*args)
    def __len__(*args): return libasp_pointlike.SkyDir___len__(*args)
    def __init__(self, *args): 
        this = libasp_pointlike.new_SkyDir(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libasp_pointlike.delete_SkyDir
    __del__ = lambda self : None;
SkyDir_swigregister = libasp_pointlike.SkyDir_swigregister
SkyDir_swigregister(SkyDir)

class Photon(SkyDir):
    __swig_setmethods__ = {}
    for _s in [SkyDir]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Photon, name, value)
    __swig_getmethods__ = {}
    for _s in [SkyDir]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Photon, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libasp_pointlike.new_Photon(*args)
        try: self.this.append(this)
        except: self.this = this
    def energy(*args): return libasp_pointlike.Photon_energy(*args)
    def eventClass(*args): return libasp_pointlike.Photon_eventClass(*args)
    def time(*args): return libasp_pointlike.Photon_time(*args)
    def source(*args): return libasp_pointlike.Photon_source(*args)
    __swig_destroy__ = libasp_pointlike.delete_Photon
    __del__ = lambda self : None;
Photon_swigregister = libasp_pointlike.Photon_swigregister
Photon_swigregister(Photon)

class PointingTransform(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointingTransform, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PointingTransform, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libasp_pointlike.new_PointingTransform(*args)
        try: self.this.append(this)
        except: self.this = this
    def localToCelestial(*args): return libasp_pointlike.PointingTransform_localToCelestial(*args)
    def gDir(*args): return libasp_pointlike.PointingTransform_gDir(*args)
    __swig_destroy__ = libasp_pointlike.delete_PointingTransform
    __del__ = lambda self : None;
PointingTransform_swigregister = libasp_pointlike.PointingTransform_swigregister
PointingTransform_swigregister(PointingTransform)

class PointingHistory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointingHistory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PointingHistory, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libasp_pointlike.new_PointingHistory(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libasp_pointlike.delete_PointingHistory
    __del__ = lambda self : None;
    def readFitsData(*args): return libasp_pointlike.PointingHistory_readFitsData(*args)
    def __call__(*args): return libasp_pointlike.PointingHistory___call__(*args)
    def startTime(*args): return libasp_pointlike.PointingHistory_startTime(*args)
    def endTime(*args): return libasp_pointlike.PointingHistory_endTime(*args)
PointingHistory_swigregister = libasp_pointlike.PointingHistory_swigregister
PointingHistory_swigregister(PointingHistory)

class PointingInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointingInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PointingInfo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libasp_pointlike.new_PointingInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libasp_pointlike.delete_PointingInfo
    __del__ = lambda self : None;
    def xAxis(*args): return libasp_pointlike.PointingInfo_xAxis(*args)
    def zAxis(*args): return libasp_pointlike.PointingInfo_zAxis(*args)
    def zenith(*args): return libasp_pointlike.PointingInfo_zenith(*args)
    def position(*args): return libasp_pointlike.PointingInfo_position(*args)
    def earthCoord(*args): return libasp_pointlike.PointingInfo_earthCoord(*args)
    def rotation(*args): return libasp_pointlike.PointingInfo_rotation(*args)
    def interpolate(*args): return libasp_pointlike.PointingInfo_interpolate(*args)
PointingInfo_swigregister = libasp_pointlike.PointingInfo_swigregister
PointingInfo_swigregister(PointingInfo)

class EarthCoordinate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EarthCoordinate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EarthCoordinate, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libasp_pointlike.new_EarthCoordinate(*args)
        try: self.this.append(this)
        except: self.this = this
    def insideSAA(*args): return libasp_pointlike.EarthCoordinate_insideSAA(*args)
    __swig_getmethods__["earthRadius"] = lambda x: libasp_pointlike.EarthCoordinate_earthRadius
    if _newclass:earthRadius = staticmethod(libasp_pointlike.EarthCoordinate_earthRadius)
    def latitude(*args): return libasp_pointlike.EarthCoordinate_latitude(*args)
    def longitude(*args): return libasp_pointlike.EarthCoordinate_longitude(*args)
    def altitude(*args): return libasp_pointlike.EarthCoordinate_altitude(*args)
    def L(*args): return libasp_pointlike.EarthCoordinate_L(*args)
    def B(*args): return libasp_pointlike.EarthCoordinate_B(*args)
    def _lambda(*args): return libasp_pointlike.EarthCoordinate__lambda(*args)
    def R(*args): return libasp_pointlike.EarthCoordinate_R(*args)
    def geolat(*args): return libasp_pointlike.EarthCoordinate_geolat(*args)
    def geolon(*args): return libasp_pointlike.EarthCoordinate_geolon(*args)
    def magnetic_field(*args): return libasp_pointlike.EarthCoordinate_magnetic_field(*args)
    __swig_getmethods__["setSAAboundary"] = lambda x: libasp_pointlike.EarthCoordinate_setSAAboundary
    if _newclass:setSAAboundary = staticmethod(libasp_pointlike.EarthCoordinate_setSAAboundary)
    __swig_destroy__ = libasp_pointlike.delete_EarthCoordinate
    __del__ = lambda self : None;
EarthCoordinate_swigregister = libasp_pointlike.EarthCoordinate_swigregister
EarthCoordinate_swigregister(EarthCoordinate)
EarthCoordinate_earthRadius = libasp_pointlike.EarthCoordinate_earthRadius
EarthCoordinate_setSAAboundary = libasp_pointlike.EarthCoordinate_setSAAboundary

class GPS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GPS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GPS, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    GLAST = libasp_pointlike.GPS_GLAST
    LAT = libasp_pointlike.GPS_LAT
    ZENITH = libasp_pointlike.GPS_ZENITH
    CELESTIAL = libasp_pointlike.GPS_CELESTIAL
    NONE = libasp_pointlike.GPS_NONE
    UPDOWN = libasp_pointlike.GPS_UPDOWN
    SLEWING = libasp_pointlike.GPS_SLEWING
    ONEPERORBIT = libasp_pointlike.GPS_ONEPERORBIT
    EXPLICIT = libasp_pointlike.GPS_EXPLICIT
    POINT = libasp_pointlike.GPS_POINT
    HISTORY = libasp_pointlike.GPS_HISTORY
    HISTORY_X_EAST = libasp_pointlike.GPS_HISTORY_X_EAST
    def lat(*args): return libasp_pointlike.GPS_lat(*args)
    def lon(*args): return libasp_pointlike.GPS_lon(*args)
    def altitude(*args): return libasp_pointlike.GPS_altitude(*args)
    def zAxisDir(*args): return libasp_pointlike.GPS_zAxisDir(*args)
    def xAxisDir(*args): return libasp_pointlike.GPS_xAxisDir(*args)
    def zenithDir(*args): return libasp_pointlike.GPS_zenithDir(*args)
    def position(*args): return libasp_pointlike.GPS_position(*args)
    def earthpos(*args): return libasp_pointlike.GPS_earthpos(*args)
    def transformToGlast(*args): return libasp_pointlike.GPS_transformToGlast(*args)
    def LATdirection(*args): return libasp_pointlike.GPS_LATdirection(*args)
    def toSky(*args): return libasp_pointlike.GPS_toSky(*args)
    def aberration(*args): return libasp_pointlike.GPS_aberration(*args)
    def correct(*args): return libasp_pointlike.GPS_correct(*args)
    def expansion(*args): return libasp_pointlike.GPS_expansion(*args)
    def synch(*args): return libasp_pointlike.GPS_synch(*args)
    def sampleintvl(*args): return libasp_pointlike.GPS_sampleintvl(*args)
    def setPointingDirection(*args): return libasp_pointlike.GPS_setPointingDirection(*args)
    def setPointingHistoryFile(*args): return libasp_pointlike.GPS_setPointingHistoryFile(*args)
    def history(*args): return libasp_pointlike.GPS_history(*args)
    def notifyObservers(*args): return libasp_pointlike.GPS_notifyObservers(*args)
    def notification(*args): return libasp_pointlike.GPS_notification(*args)
    __swig_getmethods__["instance"] = lambda x: libasp_pointlike.GPS_instance
    if _newclass:instance = staticmethod(libasp_pointlike.GPS_instance)
    __swig_getmethods__["kill"] = lambda x: libasp_pointlike.GPS_kill
    if _newclass:kill = staticmethod(libasp_pointlike.GPS_kill)
    def rockingDegrees(*args): return libasp_pointlike.GPS_rockingDegrees(*args)
    def setRockType(*args): return libasp_pointlike.GPS_setRockType(*args)
    def time(*args): return libasp_pointlike.GPS_time(*args)
    def endTime(*args): return libasp_pointlike.GPS_endTime(*args)
    __swig_getmethods__["test"] = lambda x: libasp_pointlike.GPS_test
    if _newclass:test = staticmethod(libasp_pointlike.GPS_test)
    def setAlignmentRotation(*args): return libasp_pointlike.GPS_setAlignmentRotation(*args)
    def enableAberration(*args): return libasp_pointlike.GPS_enableAberration(*args)
GPS_swigregister = libasp_pointlike.GPS_swigregister
GPS_swigregister(GPS)
GPS_instance = libasp_pointlike.GPS_instance
GPS_kill = libasp_pointlike.GPS_kill
GPS_test = libasp_pointlike.GPS_test

class Quaternion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Quaternion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Quaternion, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libasp_pointlike.new_Quaternion(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libasp_pointlike.delete_Quaternion
    __del__ = lambda self : None;
    def isNear(*args): return libasp_pointlike.Quaternion_isNear(*args)
    def __mul__(*args): return libasp_pointlike.Quaternion___mul__(*args)
    def vector(*args): return libasp_pointlike.Quaternion_vector(*args)
    def scalar(*args): return libasp_pointlike.Quaternion_scalar(*args)
    def norm(*args): return libasp_pointlike.Quaternion_norm(*args)
    def conjugate(*args): return libasp_pointlike.Quaternion_conjugate(*args)
    def rotate(*args): return libasp_pointlike.Quaternion_rotate(*args)
    def rotation(*args): return libasp_pointlike.Quaternion_rotation(*args)
    def power(*args): return libasp_pointlike.Quaternion_power(*args)
    def interpolate(*args): return libasp_pointlike.Quaternion_interpolate(*args)
    __swig_getmethods__["test"] = lambda x: libasp_pointlike.Quaternion_test
    if _newclass:test = staticmethod(libasp_pointlike.Quaternion_test)
Quaternion_swigregister = libasp_pointlike.Quaternion_swigregister
Quaternion_swigregister(Quaternion)
Quaternion_test = libasp_pointlike.Quaternion_test

class JulianDate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, JulianDate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, JulianDate, name)
    __repr__ = _swig_repr
    def getGregorianDate(*args): return libasp_pointlike.JulianDate_getGregorianDate(*args)
    def __init__(self, *args): 
        this = libasp_pointlike.new_JulianDate(*args)
        try: self.this.append(this)
        except: self.this = this
    def seconds(*args): return libasp_pointlike.JulianDate_seconds(*args)
    secondsPerDay = libasp_pointlike.JulianDate_secondsPerDay
    __swig_getmethods__["missionStart"] = lambda x: libasp_pointlike.JulianDate_missionStart
    if _newclass:missionStart = staticmethod(libasp_pointlike.JulianDate_missionStart)
    __swig_destroy__ = libasp_pointlike.delete_JulianDate
    __del__ = lambda self : None;
JulianDate_swigregister = libasp_pointlike.JulianDate_swigregister
JulianDate_swigregister(JulianDate)
JulianDate_missionStart = libasp_pointlike.JulianDate_missionStart

class SolarSystem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SolarSystem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SolarSystem, name)
    __repr__ = _swig_repr
    MERCURY = libasp_pointlike.SolarSystem_MERCURY
    VENUS = libasp_pointlike.SolarSystem_VENUS
    EARTH = libasp_pointlike.SolarSystem_EARTH
    MARS = libasp_pointlike.SolarSystem_MARS
    JUPITER = libasp_pointlike.SolarSystem_JUPITER
    SATURN = libasp_pointlike.SolarSystem_SATURN
    URANUS = libasp_pointlike.SolarSystem_URANUS
    NEPTUNE = libasp_pointlike.SolarSystem_NEPTUNE
    PLUTO = libasp_pointlike.SolarSystem_PLUTO
    MOON = libasp_pointlike.SolarSystem_MOON
    SUN = libasp_pointlike.SolarSystem_SUN
    def __init__(self, *args): 
        this = libasp_pointlike.new_SolarSystem(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libasp_pointlike.delete_SolarSystem
    __del__ = lambda self : None;
    def direction(*args): return libasp_pointlike.SolarSystem_direction(*args)
    def distance(*args): return libasp_pointlike.SolarSystem_distance(*args)
    def getBarycenter(*args): return libasp_pointlike.SolarSystem_getBarycenter(*args)
    def getSolarVector(*args): return libasp_pointlike.SolarSystem_getSolarVector(*args)
    __swig_getmethods__["vector"] = lambda x: libasp_pointlike.SolarSystem_vector
    if _newclass:vector = staticmethod(libasp_pointlike.SolarSystem_vector)
SolarSystem_swigregister = libasp_pointlike.SolarSystem_swigregister
SolarSystem_swigregister(SolarSystem)
SolarSystem_vector = libasp_pointlike.SolarSystem_vector

class Healpix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Healpix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Healpix, name)
    __repr__ = _swig_repr
    RING = libasp_pointlike.Healpix_RING
    NESTED = libasp_pointlike.Healpix_NESTED
    NEST = libasp_pointlike.Healpix_NEST
    def __init__(self, *args): 
        this = libasp_pointlike.new_Healpix(*args)
        try: self.this.append(this)
        except: self.this = this
    def nside(*args): return libasp_pointlike.Healpix_nside(*args)
    def npix(*args): return libasp_pointlike.Healpix_npix(*args)
    def size(*args): return libasp_pointlike.Healpix_size(*args)
    def pixelArea(*args): return libasp_pointlike.Healpix_pixelArea(*args)
    def ord(*args): return libasp_pointlike.Healpix_ord(*args)
    def nested(*args): return libasp_pointlike.Healpix_nested(*args)
    def coordsys(*args): return libasp_pointlike.Healpix_coordsys(*args)
    def galactic(*args): return libasp_pointlike.Healpix_galactic(*args)
    def findNeighbors(*args): return libasp_pointlike.Healpix_findNeighbors(*args)
    def query_disc(*args): return libasp_pointlike.Healpix_query_disc(*args)
    def pix2ang(*args): return libasp_pointlike.Healpix_pix2ang(*args)
    def ang2pix(*args): return libasp_pointlike.Healpix_ang2pix(*args)
    __swig_destroy__ = libasp_pointlike.delete_Healpix
    __del__ = lambda self : None;
Healpix_swigregister = libasp_pointlike.Healpix_swigregister
Healpix_swigregister(Healpix)

class HealpixMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HealpixMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HealpixMap, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libasp_pointlike.new_HealpixMap(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libasp_pointlike.delete_HealpixMap
    __del__ = lambda self : None;
    def save(*args): return libasp_pointlike.HealpixMap_save(*args)
    def load(*args): return libasp_pointlike.HealpixMap_load(*args)
    def level(*args): return libasp_pointlike.HealpixMap_level(*args)
    def __getitem__(*args): return libasp_pointlike.HealpixMap___getitem__(*args)
    def __call__(*args): return libasp_pointlike.HealpixMap___call__(*args)
    def __len__(*args): return libasp_pointlike.HealpixMap___len__(*args)
HealpixMap_swigregister = libasp_pointlike.HealpixMap_swigregister
HealpixMap_swigregister(HealpixMap)

class Module(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Module, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Module, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libasp_pointlike.new_Module(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libasp_pointlike.delete_Module
    __del__ = lambda self : None;
    def getValue(*args): return libasp_pointlike.Module_getValue(*args)
    def getList(*args): return libasp_pointlike.Module_getList(*args)
    def getDict(*args): return libasp_pointlike.Module_getDict(*args)
    def type(*args): return libasp_pointlike.Module_type(*args)
    def call(*args): return libasp_pointlike.Module_call(*args)
    def attribute(*args): return libasp_pointlike.Module_attribute(*args)
    def root(*args): return libasp_pointlike.Module_root(*args)
    __swig_getmethods__["test"] = lambda x: libasp_pointlike.Module_test
    if _newclass:test = staticmethod(libasp_pointlike.Module_test)
Module_swigregister = libasp_pointlike.Module_swigregister
Module_swigregister(Module)
Module_test = libasp_pointlike.Module_test

class SimpleLikelihood(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleLikelihood, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleLikelihood, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libasp_pointlike.new_SimpleLikelihood(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libasp_pointlike.delete_SimpleLikelihood
    __del__ = lambda self : None;
    def band(*args): return libasp_pointlike.SimpleLikelihood_band(*args)
    def bands(*args): return libasp_pointlike.SimpleLikelihood_bands(*args)
    def addBand(*args): return libasp_pointlike.SimpleLikelihood_addBand(*args)
    def logLikelihood(*args): return libasp_pointlike.SimpleLikelihood_logLikelihood(*args)
    def maximize(*args): return libasp_pointlike.SimpleLikelihood_maximize(*args)
    def photons(*args): return libasp_pointlike.SimpleLikelihood_photons(*args)
    def gradient(*args): return libasp_pointlike.SimpleLikelihood_gradient(*args)
    def curvature(*args): return libasp_pointlike.SimpleLikelihood_curvature(*args)
    def value(*args): return libasp_pointlike.SimpleLikelihood_value(*args)
    def setDir(*args): return libasp_pointlike.SimpleLikelihood_setDir(*args)
    def alpha(*args): return libasp_pointlike.SimpleLikelihood_alpha(*args)
    def setalpha(*args): return libasp_pointlike.SimpleLikelihood_setalpha(*args)
    def sigma_alpha(*args): return libasp_pointlike.SimpleLikelihood_sigma_alpha(*args)
    def TS(*args): return libasp_pointlike.SimpleLikelihood_TS(*args)
    def poissonLikelihood(*args): return libasp_pointlike.SimpleLikelihood_poissonLikelihood(*args)
    def poissonDerivatives(*args): return libasp_pointlike.SimpleLikelihood_poissonDerivatives(*args)
    def signal(*args): return libasp_pointlike.SimpleLikelihood_signal(*args)
    def background(*args): return libasp_pointlike.SimpleLikelihood_background(*args)
    def solidAngle(*args): return libasp_pointlike.SimpleLikelihood_solidAngle(*args)
    def umax(*args): return libasp_pointlike.SimpleLikelihood_umax(*args)
    def average_u(*args): return libasp_pointlike.SimpleLikelihood_average_u(*args)
    def average_b(*args): return libasp_pointlike.SimpleLikelihood_average_b(*args)
    def feval(*args): return libasp_pointlike.SimpleLikelihood_feval(*args)
    def geval(*args): return libasp_pointlike.SimpleLikelihood_geval(*args)
    def changepsf(*args): return libasp_pointlike.SimpleLikelihood_changepsf(*args)
    def setgamma(*args): return libasp_pointlike.SimpleLikelihood_setgamma(*args)
    def __call__(*args): return libasp_pointlike.SimpleLikelihood___call__(*args)
    def display(*args): return libasp_pointlike.SimpleLikelihood_display(*args)
    def sigma(*args): return libasp_pointlike.SimpleLikelihood_sigma(*args)
    def setsigma(*args): return libasp_pointlike.SimpleLikelihood_setsigma(*args)
    def gamma(*args): return libasp_pointlike.SimpleLikelihood_gamma(*args)
    def recalc(*args): return libasp_pointlike.SimpleLikelihood_recalc(*args)
    def reload(*args): return libasp_pointlike.SimpleLikelihood_reload(*args)
    def TSmap(*args): return libasp_pointlike.SimpleLikelihood_TSmap(*args)
    def derivatives(*args): return libasp_pointlike.SimpleLikelihood_derivatives(*args)
    def background_function(*args): return libasp_pointlike.SimpleLikelihood_background_function(*args)
    __swig_getmethods__["tolerance"] = lambda x: libasp_pointlike.SimpleLikelihood_tolerance
    if _newclass:tolerance = staticmethod(libasp_pointlike.SimpleLikelihood_tolerance)
    __swig_getmethods__["setTolerance"] = lambda x: libasp_pointlike.SimpleLikelihood_setTolerance
    if _newclass:setTolerance = staticmethod(libasp_pointlike.SimpleLikelihood_setTolerance)
    __swig_getmethods__["defaultUmax"] = lambda x: libasp_pointlike.SimpleLikelihood_defaultUmax
    if _newclass:defaultUmax = staticmethod(libasp_pointlike.SimpleLikelihood_defaultUmax)
    __swig_getmethods__["setDefaultUmax"] = lambda x: libasp_pointlike.SimpleLikelihood_setDefaultUmax
    if _newclass:setDefaultUmax = staticmethod(libasp_pointlike.SimpleLikelihood_setDefaultUmax)
    __swig_getmethods__["enable_extended_likelihood"] = lambda x: libasp_pointlike.SimpleLikelihood_enable_extended_likelihood
    if _newclass:enable_extended_likelihood = staticmethod(libasp_pointlike.SimpleLikelihood_enable_extended_likelihood)
    __swig_getmethods__["extended_likelihood"] = lambda x: libasp_pointlike.SimpleLikelihood_extended_likelihood
    if _newclass:extended_likelihood = staticmethod(libasp_pointlike.SimpleLikelihood_extended_likelihood)
SimpleLikelihood_swigregister = libasp_pointlike.SimpleLikelihood_swigregister
SimpleLikelihood_swigregister(SimpleLikelihood)
SimpleLikelihood_tolerance = libasp_pointlike.SimpleLikelihood_tolerance
SimpleLikelihood_setTolerance = libasp_pointlike.SimpleLikelihood_setTolerance
SimpleLikelihood_defaultUmax = libasp_pointlike.SimpleLikelihood_defaultUmax
SimpleLikelihood_setDefaultUmax = libasp_pointlike.SimpleLikelihood_setDefaultUmax
SimpleLikelihood_enable_extended_likelihood = libasp_pointlike.SimpleLikelihood_enable_extended_likelihood
SimpleLikelihood_extended_likelihood = libasp_pointlike.SimpleLikelihood_extended_likelihood

class PointSourceLikelihood(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointSourceLikelihood, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PointSourceLikelihood, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libasp_pointlike.new_PointSourceLikelihood(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libasp_pointlike.delete_PointSourceLikelihood
    __del__ = lambda self : None;
    def maximize(*args): return libasp_pointlike.PointSourceLikelihood_maximize(*args)
    def setDir(*args): return libasp_pointlike.PointSourceLikelihood_setDir(*args)
    def gradient(*args): return libasp_pointlike.PointSourceLikelihood_gradient(*args)
    def curvature(*args): return libasp_pointlike.PointSourceLikelihood_curvature(*args)
    def printSpectrum(*args): return libasp_pointlike.PointSourceLikelihood_printSpectrum(*args)
    def energyList(*args): return libasp_pointlike.PointSourceLikelihood_energyList(*args)
    def localize(*args): return libasp_pointlike.PointSourceLikelihood_localize(*args)
    def fit_localization(*args): return libasp_pointlike.PointSourceLikelihood_fit_localization(*args)
    def name(*args): return libasp_pointlike.PointSourceLikelihood_name(*args)
    def dir(*args): return libasp_pointlike.PointSourceLikelihood_dir(*args)
    def TS(*args): return libasp_pointlike.PointSourceLikelihood_TS(*args)
    def alpha(*args): return libasp_pointlike.PointSourceLikelihood_alpha(*args)
    def errorCircle(*args): return libasp_pointlike.PointSourceLikelihood_errorCircle(*args)
    def set_ostream(*args): return libasp_pointlike.PointSourceLikelihood_set_ostream(*args)
    __swig_getmethods__["set_verbose"] = lambda x: libasp_pointlike.PointSourceLikelihood_set_verbose
    if _newclass:set_verbose = staticmethod(libasp_pointlike.PointSourceLikelihood_set_verbose)
    __swig_getmethods__["verbose"] = lambda x: libasp_pointlike.PointSourceLikelihood_verbose
    if _newclass:verbose = staticmethod(libasp_pointlike.PointSourceLikelihood_verbose)
    def value(*args): return libasp_pointlike.PointSourceLikelihood_value(*args)
    def band_value(*args): return libasp_pointlike.PointSourceLikelihood_band_value(*args)
    def integral(*args): return libasp_pointlike.PointSourceLikelihood_integral(*args)
    __swig_getmethods__["setParameters"] = lambda x: libasp_pointlike.PointSourceLikelihood_setParameters
    if _newclass:setParameters = staticmethod(libasp_pointlike.PointSourceLikelihood_setParameters)
    __swig_getmethods__["setDefaultUmax"] = lambda x: libasp_pointlike.PointSourceLikelihood_setDefaultUmax
    if _newclass:setDefaultUmax = staticmethod(libasp_pointlike.PointSourceLikelihood_setDefaultUmax)
    __swig_getmethods__["set_diffuse"] = lambda x: libasp_pointlike.PointSourceLikelihood_set_diffuse
    if _newclass:set_diffuse = staticmethod(libasp_pointlike.PointSourceLikelihood_set_diffuse)
    __swig_getmethods__["set_background"] = lambda x: libasp_pointlike.PointSourceLikelihood_set_background
    if _newclass:set_background = staticmethod(libasp_pointlike.PointSourceLikelihood_set_background)
    __swig_getmethods__["clear_background"] = lambda x: libasp_pointlike.PointSourceLikelihood_clear_background
    if _newclass:clear_background = staticmethod(libasp_pointlike.PointSourceLikelihood_clear_background)
    def addBackgroundPointSource(*args): return libasp_pointlike.PointSourceLikelihood_addBackgroundPointSource(*args)
    def clearBackgroundPointSource(*args): return libasp_pointlike.PointSourceLikelihood_clearBackgroundPointSource(*args)
    def background(*args): return libasp_pointlike.PointSourceLikelihood_background(*args)
    __swig_getmethods__["set_tolerance"] = lambda x: libasp_pointlike.PointSourceLikelihood_set_tolerance
    if _newclass:set_tolerance = staticmethod(libasp_pointlike.PointSourceLikelihood_set_tolerance)
    __swig_getmethods__["set_energy_range"] = lambda x: libasp_pointlike.PointSourceLikelihood_set_energy_range
    if _newclass:set_energy_range = staticmethod(libasp_pointlike.PointSourceLikelihood_set_energy_range)
    __swig_getmethods__["get_energy_range"] = lambda x: libasp_pointlike.PointSourceLikelihood_get_energy_range
    if _newclass:get_energy_range = staticmethod(libasp_pointlike.PointSourceLikelihood_get_energy_range)
    __swig_getmethods__["set_min_alpha"] = lambda x: libasp_pointlike.PointSourceLikelihood_set_min_alpha
    if _newclass:set_min_alpha = staticmethod(libasp_pointlike.PointSourceLikelihood_set_min_alpha)
    def display(*args): return libasp_pointlike.PointSourceLikelihood_display(*args)
    def TSmap(*args): return libasp_pointlike.PointSourceLikelihood_TSmap(*args)
    __swig_getmethods__["set_merge"] = lambda x: libasp_pointlike.PointSourceLikelihood_set_merge
    if _newclass:set_merge = staticmethod(libasp_pointlike.PointSourceLikelihood_set_merge)
    __swig_getmethods__["merge"] = lambda x: libasp_pointlike.PointSourceLikelihood_merge
    if _newclass:merge = staticmethod(libasp_pointlike.PointSourceLikelihood_merge)
    __swig_getmethods__["set_fitlsq"] = lambda x: libasp_pointlike.PointSourceLikelihood_set_fitlsq
    if _newclass:set_fitlsq = staticmethod(libasp_pointlike.PointSourceLikelihood_set_fitlsq)
    __swig_getmethods__["fitlsq"] = lambda x: libasp_pointlike.PointSourceLikelihood_fitlsq
    if _newclass:fitlsq = staticmethod(libasp_pointlike.PointSourceLikelihood_fitlsq)
    __swig_getmethods__["set_maxROI"] = lambda x: libasp_pointlike.PointSourceLikelihood_set_maxROI
    if _newclass:set_maxROI = staticmethod(libasp_pointlike.PointSourceLikelihood_set_maxROI)
    __swig_getmethods__["maxROI"] = lambda x: libasp_pointlike.PointSourceLikelihood_maxROI
    if _newclass:maxROI = staticmethod(libasp_pointlike.PointSourceLikelihood_maxROI)
    __swig_getmethods__["set_minROI"] = lambda x: libasp_pointlike.PointSourceLikelihood_set_minROI
    if _newclass:set_minROI = staticmethod(libasp_pointlike.PointSourceLikelihood_set_minROI)
    __swig_getmethods__["minROI"] = lambda x: libasp_pointlike.PointSourceLikelihood_minROI
    if _newclass:minROI = staticmethod(libasp_pointlike.PointSourceLikelihood_minROI)
    def setup(*args): return libasp_pointlike.PointSourceLikelihood_setup(*args)
    def __getitem__(*args): return libasp_pointlike.PointSourceLikelihood___getitem__(*args)
    def __len__(*args): return libasp_pointlike.PointSourceLikelihood___len__(*args)
PointSourceLikelihood_swigregister = libasp_pointlike.PointSourceLikelihood_swigregister
PointSourceLikelihood_swigregister(PointSourceLikelihood)
PointSourceLikelihood_set_verbose = libasp_pointlike.PointSourceLikelihood_set_verbose
PointSourceLikelihood_verbose = libasp_pointlike.PointSourceLikelihood_verbose
PointSourceLikelihood_setParameters = libasp_pointlike.PointSourceLikelihood_setParameters
PointSourceLikelihood_setDefaultUmax = libasp_pointlike.PointSourceLikelihood_setDefaultUmax
PointSourceLikelihood_set_diffuse = libasp_pointlike.PointSourceLikelihood_set_diffuse
PointSourceLikelihood_set_background = libasp_pointlike.PointSourceLikelihood_set_background
PointSourceLikelihood_clear_background = libasp_pointlike.PointSourceLikelihood_clear_background
PointSourceLikelihood_set_tolerance = libasp_pointlike.PointSourceLikelihood_set_tolerance
PointSourceLikelihood_set_energy_range = libasp_pointlike.PointSourceLikelihood_set_energy_range
PointSourceLikelihood_get_energy_range = libasp_pointlike.PointSourceLikelihood_get_energy_range
PointSourceLikelihood_set_min_alpha = libasp_pointlike.PointSourceLikelihood_set_min_alpha
PointSourceLikelihood_set_merge = libasp_pointlike.PointSourceLikelihood_set_merge
PointSourceLikelihood_merge = libasp_pointlike.PointSourceLikelihood_merge
PointSourceLikelihood_set_fitlsq = libasp_pointlike.PointSourceLikelihood_set_fitlsq
PointSourceLikelihood_fitlsq = libasp_pointlike.PointSourceLikelihood_fitlsq
PointSourceLikelihood_set_maxROI = libasp_pointlike.PointSourceLikelihood_set_maxROI
PointSourceLikelihood_maxROI = libasp_pointlike.PointSourceLikelihood_maxROI
PointSourceLikelihood_set_minROI = libasp_pointlike.PointSourceLikelihood_set_minROI
PointSourceLikelihood_minROI = libasp_pointlike.PointSourceLikelihood_minROI

class PSLdisplay(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSLdisplay, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSLdisplay, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libasp_pointlike.new_PSLdisplay(*args)
        try: self.this.append(this)
        except: self.this = this
    def value(*args): return libasp_pointlike.PSLdisplay_value(*args)
    def integral(*args): return libasp_pointlike.PSLdisplay_integral(*args)
    def name(*args): return libasp_pointlike.PSLdisplay_name(*args)
    __swig_destroy__ = libasp_pointlike.delete_PSLdisplay
    __del__ = lambda self : None;
PSLdisplay_swigregister = libasp_pointlike.PSLdisplay_swigregister
PSLdisplay_swigregister(PSLdisplay)

class TSmap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TSmap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TSmap, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libasp_pointlike.new_TSmap(*args)
        try: self.this.append(this)
        except: self.this = this
    def setPointSource(*args): return libasp_pointlike.TSmap_setPointSource(*args)
    __swig_destroy__ = libasp_pointlike.delete_TSmap
    __del__ = lambda self : None;
    def __call__(*args): return libasp_pointlike.TSmap___call__(*args)
TSmap_swigregister = libasp_pointlike.TSmap_swigregister
TSmap_swigregister(TSmap)

class ExtendedLikelihood(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExtendedLikelihood, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExtendedLikelihood, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libasp_pointlike.new_ExtendedLikelihood(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libasp_pointlike.delete_ExtendedLikelihood
    __del__ = lambda self : None;
    def band(*args): return libasp_pointlike.ExtendedLikelihood_band(*args)
    def maximize(*args): return libasp_pointlike.ExtendedLikelihood_maximize(*args)
    def photons(*args): return libasp_pointlike.ExtendedLikelihood_photons(*args)
    def ps_gradient(*args): return libasp_pointlike.ExtendedLikelihood_ps_gradient(*args)
    def gradient(*args): return libasp_pointlike.ExtendedLikelihood_gradient(*args)
    def ps_curvature(*args): return libasp_pointlike.ExtendedLikelihood_ps_curvature(*args)
    def value(*args): return libasp_pointlike.ExtendedLikelihood_value(*args)
    def setDir(*args): return libasp_pointlike.ExtendedLikelihood_setDir(*args)
    def alpha(*args): return libasp_pointlike.ExtendedLikelihood_alpha(*args)
    def setAlpha(*args): return libasp_pointlike.ExtendedLikelihood_setAlpha(*args)
    def flux(*args): return libasp_pointlike.ExtendedLikelihood_flux(*args)
    def exposure(*args): return libasp_pointlike.ExtendedLikelihood_exposure(*args)
    def setFlux(*args): return libasp_pointlike.ExtendedLikelihood_setFlux(*args)
    def sigma_alpha(*args): return libasp_pointlike.ExtendedLikelihood_sigma_alpha(*args)
    def TS(*args): return libasp_pointlike.ExtendedLikelihood_TS(*args)
    def setBackgroundDensity(*args): return libasp_pointlike.ExtendedLikelihood_setBackgroundDensity(*args)
    def poissonLikelihood(*args): return libasp_pointlike.ExtendedLikelihood_poissonLikelihood(*args)
    def signal(*args): return libasp_pointlike.ExtendedLikelihood_signal(*args)
    def background(*args): return libasp_pointlike.ExtendedLikelihood_background(*args)
    def solidAngle(*args): return libasp_pointlike.ExtendedLikelihood_solidAngle(*args)
    def umax(*args): return libasp_pointlike.ExtendedLikelihood_umax(*args)
    def average_u(*args): return libasp_pointlike.ExtendedLikelihood_average_u(*args)
    def average_F(*args): return libasp_pointlike.ExtendedLikelihood_average_F(*args)
    def average_b(*args): return libasp_pointlike.ExtendedLikelihood_average_b(*args)
    def changepsf(*args): return libasp_pointlike.ExtendedLikelihood_changepsf(*args)
    def gamma(*args): return libasp_pointlike.ExtendedLikelihood_gamma(*args)
    def setgamma(*args): return libasp_pointlike.ExtendedLikelihood_setgamma(*args)
    def __call__(*args): return libasp_pointlike.ExtendedLikelihood___call__(*args)
    def display(*args): return libasp_pointlike.ExtendedLikelihood_display(*args)
    def sigma(*args): return libasp_pointlike.ExtendedLikelihood_sigma(*args)
    def setsigma(*args): return libasp_pointlike.ExtendedLikelihood_setsigma(*args)
    def psfIntegral(*args): return libasp_pointlike.ExtendedLikelihood_psfIntegral(*args)
    def recalc(*args): return libasp_pointlike.ExtendedLikelihood_recalc(*args)
    def reload(*args): return libasp_pointlike.ExtendedLikelihood_reload(*args)
    def residual(*args): return libasp_pointlike.ExtendedLikelihood_residual(*args)
    def jacobian(*args): return libasp_pointlike.ExtendedLikelihood_jacobian(*args)
    def diffuse(*args): return libasp_pointlike.ExtendedLikelihood_diffuse(*args)
    def setDiffuse(*args): return libasp_pointlike.ExtendedLikelihood_setDiffuse(*args)
    def setExposure(*args): return libasp_pointlike.ExtendedLikelihood_setExposure(*args)
    __swig_getmethods__["tolerance"] = lambda x: libasp_pointlike.ExtendedLikelihood_tolerance
    if _newclass:tolerance = staticmethod(libasp_pointlike.ExtendedLikelihood_tolerance)
    __swig_getmethods__["setTolerance"] = lambda x: libasp_pointlike.ExtendedLikelihood_setTolerance
    if _newclass:setTolerance = staticmethod(libasp_pointlike.ExtendedLikelihood_setTolerance)
    __swig_getmethods__["defaultUmax"] = lambda x: libasp_pointlike.ExtendedLikelihood_defaultUmax
    if _newclass:defaultUmax = staticmethod(libasp_pointlike.ExtendedLikelihood_defaultUmax)
    __swig_getmethods__["setDefaultUmax"] = lambda x: libasp_pointlike.ExtendedLikelihood_setDefaultUmax
    if _newclass:setDefaultUmax = staticmethod(libasp_pointlike.ExtendedLikelihood_setDefaultUmax)
    __swig_getmethods__["defaultRoI"] = lambda x: libasp_pointlike.ExtendedLikelihood_defaultRoI
    if _newclass:defaultRoI = staticmethod(libasp_pointlike.ExtendedLikelihood_defaultRoI)
    __swig_getmethods__["setDefaultRoI"] = lambda x: libasp_pointlike.ExtendedLikelihood_setDefaultRoI
    if _newclass:setDefaultRoI = staticmethod(libasp_pointlike.ExtendedLikelihood_setDefaultRoI)
ExtendedLikelihood_swigregister = libasp_pointlike.ExtendedLikelihood_swigregister
ExtendedLikelihood_swigregister(ExtendedLikelihood)
ExtendedLikelihood_tolerance = libasp_pointlike.ExtendedLikelihood_tolerance
ExtendedLikelihood_setTolerance = libasp_pointlike.ExtendedLikelihood_setTolerance
ExtendedLikelihood_defaultUmax = libasp_pointlike.ExtendedLikelihood_defaultUmax
ExtendedLikelihood_setDefaultUmax = libasp_pointlike.ExtendedLikelihood_setDefaultUmax
ExtendedLikelihood_defaultRoI = libasp_pointlike.ExtendedLikelihood_defaultRoI
ExtendedLikelihood_setDefaultRoI = libasp_pointlike.ExtendedLikelihood_setDefaultRoI

class SourceLikelihood(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SourceLikelihood, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SourceLikelihood, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libasp_pointlike.new_SourceLikelihood(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libasp_pointlike.delete_SourceLikelihood
    __del__ = lambda self : None;
    def maximize(*args): return libasp_pointlike.SourceLikelihood_maximize(*args)
    def setDir(*args): return libasp_pointlike.SourceLikelihood_setDir(*args)
    def gradient(*args): return libasp_pointlike.SourceLikelihood_gradient(*args)
    def printSpectrum(*args): return libasp_pointlike.SourceLikelihood_printSpectrum(*args)
    def localizeMinuit(*args): return libasp_pointlike.SourceLikelihood_localizeMinuit(*args)
    def localize(*args): return libasp_pointlike.SourceLikelihood_localize(*args)
    def fit(*args): return libasp_pointlike.SourceLikelihood_fit(*args)
    def name(*args): return libasp_pointlike.SourceLikelihood_name(*args)
    def dir(*args): return libasp_pointlike.SourceLikelihood_dir(*args)
    def TS(*args): return libasp_pointlike.SourceLikelihood_TS(*args)
    def alpha(*args): return libasp_pointlike.SourceLikelihood_alpha(*args)
    def logL(*args): return libasp_pointlike.SourceLikelihood_logL(*args)
    def set_ostream(*args): return libasp_pointlike.SourceLikelihood_set_ostream(*args)
    __swig_getmethods__["setVerbose"] = lambda x: libasp_pointlike.SourceLikelihood_setVerbose
    if _newclass:setVerbose = staticmethod(libasp_pointlike.SourceLikelihood_setVerbose)
    __swig_getmethods__["verbose"] = lambda x: libasp_pointlike.SourceLikelihood_verbose
    if _newclass:verbose = staticmethod(libasp_pointlike.SourceLikelihood_verbose)
    def value(*args): return libasp_pointlike.SourceLikelihood_value(*args)
    def integral(*args): return libasp_pointlike.SourceLikelihood_integral(*args)
    __swig_getmethods__["setParameters"] = lambda x: libasp_pointlike.SourceLikelihood_setParameters
    if _newclass:setParameters = staticmethod(libasp_pointlike.SourceLikelihood_setParameters)
    __swig_getmethods__["setDefaultUmax"] = lambda x: libasp_pointlike.SourceLikelihood_setDefaultUmax
    if _newclass:setDefaultUmax = staticmethod(libasp_pointlike.SourceLikelihood_setDefaultUmax)
    __swig_getmethods__["defaultUmax"] = lambda x: libasp_pointlike.SourceLikelihood_defaultUmax
    if _newclass:defaultUmax = staticmethod(libasp_pointlike.SourceLikelihood_defaultUmax)
    __swig_getmethods__["setTolerance"] = lambda x: libasp_pointlike.SourceLikelihood_setTolerance
    if _newclass:setTolerance = staticmethod(libasp_pointlike.SourceLikelihood_setTolerance)
    __swig_getmethods__["tolerance"] = lambda x: libasp_pointlike.SourceLikelihood_tolerance
    if _newclass:tolerance = staticmethod(libasp_pointlike.SourceLikelihood_tolerance)
    __swig_getmethods__["setDefaultRoI"] = lambda x: libasp_pointlike.SourceLikelihood_setDefaultRoI
    if _newclass:setDefaultRoI = staticmethod(libasp_pointlike.SourceLikelihood_setDefaultRoI)
    __swig_getmethods__["defaultRoI"] = lambda x: libasp_pointlike.SourceLikelihood_defaultRoI
    if _newclass:defaultRoI = staticmethod(libasp_pointlike.SourceLikelihood_defaultRoI)
    __swig_getmethods__["setEnergyRange"] = lambda x: libasp_pointlike.SourceLikelihood_setEnergyRange
    if _newclass:setEnergyRange = staticmethod(libasp_pointlike.SourceLikelihood_setEnergyRange)
    __swig_getmethods__["set_energy_range"] = lambda x: libasp_pointlike.SourceLikelihood_set_energy_range
    if _newclass:set_energy_range = staticmethod(libasp_pointlike.SourceLikelihood_set_energy_range)
    __swig_getmethods__["emin"] = lambda x: libasp_pointlike.SourceLikelihood_emin
    if _newclass:emin = staticmethod(libasp_pointlike.SourceLikelihood_emin)
    __swig_getmethods__["emax"] = lambda x: libasp_pointlike.SourceLikelihood_emax
    if _newclass:emax = staticmethod(libasp_pointlike.SourceLikelihood_emax)
    __swig_getmethods__["nParameter"] = lambda x: libasp_pointlike.SourceLikelihood_nParameter
    if _newclass:nParameter = staticmethod(libasp_pointlike.SourceLikelihood_nParameter)
    __swig_getmethods__["setMinAlpha"] = lambda x: libasp_pointlike.SourceLikelihood_setMinAlpha
    if _newclass:setMinAlpha = staticmethod(libasp_pointlike.SourceLikelihood_setMinAlpha)
    __swig_getmethods__["set_min_alpha"] = lambda x: libasp_pointlike.SourceLikelihood_set_min_alpha
    if _newclass:set_min_alpha = staticmethod(libasp_pointlike.SourceLikelihood_set_min_alpha)
    __swig_getmethods__["minAlpha"] = lambda x: libasp_pointlike.SourceLikelihood_minAlpha
    if _newclass:minAlpha = staticmethod(libasp_pointlike.SourceLikelihood_minAlpha)
    __swig_getmethods__["setMinTS"] = lambda x: libasp_pointlike.SourceLikelihood_setMinTS
    if _newclass:setMinTS = staticmethod(libasp_pointlike.SourceLikelihood_setMinTS)
    __swig_getmethods__["minTS"] = lambda x: libasp_pointlike.SourceLikelihood_minTS
    if _newclass:minTS = staticmethod(libasp_pointlike.SourceLikelihood_minTS)
    __swig_getmethods__["setFitAccuracy"] = lambda x: libasp_pointlike.SourceLikelihood_setFitAccuracy
    if _newclass:setFitAccuracy = staticmethod(libasp_pointlike.SourceLikelihood_setFitAccuracy)
    __swig_getmethods__["fitAccuracy"] = lambda x: libasp_pointlike.SourceLikelihood_fitAccuracy
    if _newclass:fitAccuracy = staticmethod(libasp_pointlike.SourceLikelihood_fitAccuracy)
    __swig_getmethods__["setMinuitMode"] = lambda x: libasp_pointlike.SourceLikelihood_setMinuitMode
    if _newclass:setMinuitMode = staticmethod(libasp_pointlike.SourceLikelihood_setMinuitMode)
    __swig_getmethods__["minuitMode"] = lambda x: libasp_pointlike.SourceLikelihood_minuitMode
    if _newclass:minuitMode = staticmethod(libasp_pointlike.SourceLikelihood_minuitMode)
    __swig_getmethods__["setGamma"] = lambda x: libasp_pointlike.SourceLikelihood_setGamma
    if _newclass:setGamma = staticmethod(libasp_pointlike.SourceLikelihood_setGamma)
    __swig_getmethods__["gamma"] = lambda x: libasp_pointlike.SourceLikelihood_gamma
    if _newclass:gamma = staticmethod(libasp_pointlike.SourceLikelihood_gamma)
    __swig_getmethods__["setSigma"] = lambda x: libasp_pointlike.SourceLikelihood_setSigma
    if _newclass:setSigma = staticmethod(libasp_pointlike.SourceLikelihood_setSigma)
    __swig_getmethods__["sigma"] = lambda x: libasp_pointlike.SourceLikelihood_sigma
    if _newclass:sigma = staticmethod(libasp_pointlike.SourceLikelihood_sigma)
    __swig_getmethods__["setExtscale"] = lambda x: libasp_pointlike.SourceLikelihood_setExtscale
    if _newclass:setExtscale = staticmethod(libasp_pointlike.SourceLikelihood_setExtscale)
    __swig_getmethods__["extscale"] = lambda x: libasp_pointlike.SourceLikelihood_extscale
    if _newclass:extscale = staticmethod(libasp_pointlike.SourceLikelihood_extscale)
    __swig_getmethods__["setMaxSize"] = lambda x: libasp_pointlike.SourceLikelihood_setMaxSize
    if _newclass:setMaxSize = staticmethod(libasp_pointlike.SourceLikelihood_setMaxSize)
    __swig_getmethods__["maxSize"] = lambda x: libasp_pointlike.SourceLikelihood_maxSize
    if _newclass:maxSize = staticmethod(libasp_pointlike.SourceLikelihood_maxSize)
    def type(*args): return libasp_pointlike.SourceLikelihood_type(*args)
    def sourceParameters(*args): return libasp_pointlike.SourceLikelihood_sourceParameters(*args)
    def sourceParErrors(*args): return libasp_pointlike.SourceLikelihood_sourceParErrors(*args)
    def errorX(*args): return libasp_pointlike.SourceLikelihood_errorX(*args)
    def errorY(*args): return libasp_pointlike.SourceLikelihood_errorY(*args)
    def errorsMINOS(*args): return libasp_pointlike.SourceLikelihood_errorsMINOS(*args)
    __swig_getmethods__["set_diffuse"] = lambda x: libasp_pointlike.SourceLikelihood_set_diffuse
    if _newclass:set_diffuse = staticmethod(libasp_pointlike.SourceLikelihood_set_diffuse)
    __swig_getmethods__["set_exposure"] = lambda x: libasp_pointlike.SourceLikelihood_set_exposure
    if _newclass:set_exposure = staticmethod(libasp_pointlike.SourceLikelihood_set_exposure)
    def addBackgroundPointSource(*args): return libasp_pointlike.SourceLikelihood_addBackgroundPointSource(*args)
    def clearBackgroundPointSource(*args): return libasp_pointlike.SourceLikelihood_clearBackgroundPointSource(*args)
    def background(*args): return libasp_pointlike.SourceLikelihood_background(*args)
    def display(*args): return libasp_pointlike.SourceLikelihood_display(*args)
    def energyList(*args): return libasp_pointlike.SourceLikelihood_energyList(*args)
SourceLikelihood_swigregister = libasp_pointlike.SourceLikelihood_swigregister
SourceLikelihood_swigregister(SourceLikelihood)
SourceLikelihood_setVerbose = libasp_pointlike.SourceLikelihood_setVerbose
SourceLikelihood_verbose = libasp_pointlike.SourceLikelihood_verbose
SourceLikelihood_setParameters = libasp_pointlike.SourceLikelihood_setParameters
SourceLikelihood_setDefaultUmax = libasp_pointlike.SourceLikelihood_setDefaultUmax
SourceLikelihood_defaultUmax = libasp_pointlike.SourceLikelihood_defaultUmax
SourceLikelihood_setTolerance = libasp_pointlike.SourceLikelihood_setTolerance
SourceLikelihood_tolerance = libasp_pointlike.SourceLikelihood_tolerance
SourceLikelihood_setDefaultRoI = libasp_pointlike.SourceLikelihood_setDefaultRoI
SourceLikelihood_defaultRoI = libasp_pointlike.SourceLikelihood_defaultRoI
SourceLikelihood_setEnergyRange = libasp_pointlike.SourceLikelihood_setEnergyRange
SourceLikelihood_set_energy_range = libasp_pointlike.SourceLikelihood_set_energy_range
SourceLikelihood_emin = libasp_pointlike.SourceLikelihood_emin
SourceLikelihood_emax = libasp_pointlike.SourceLikelihood_emax
SourceLikelihood_nParameter = libasp_pointlike.SourceLikelihood_nParameter
SourceLikelihood_setMinAlpha = libasp_pointlike.SourceLikelihood_setMinAlpha
SourceLikelihood_set_min_alpha = libasp_pointlike.SourceLikelihood_set_min_alpha
SourceLikelihood_minAlpha = libasp_pointlike.SourceLikelihood_minAlpha
SourceLikelihood_setMinTS = libasp_pointlike.SourceLikelihood_setMinTS
SourceLikelihood_minTS = libasp_pointlike.SourceLikelihood_minTS
SourceLikelihood_setFitAccuracy = libasp_pointlike.SourceLikelihood_setFitAccuracy
SourceLikelihood_fitAccuracy = libasp_pointlike.SourceLikelihood_fitAccuracy
SourceLikelihood_setMinuitMode = libasp_pointlike.SourceLikelihood_setMinuitMode
SourceLikelihood_minuitMode = libasp_pointlike.SourceLikelihood_minuitMode
SourceLikelihood_setGamma = libasp_pointlike.SourceLikelihood_setGamma
SourceLikelihood_gamma = libasp_pointlike.SourceLikelihood_gamma
SourceLikelihood_setSigma = libasp_pointlike.SourceLikelihood_setSigma
SourceLikelihood_sigma = libasp_pointlike.SourceLikelihood_sigma
SourceLikelihood_setExtscale = libasp_pointlike.SourceLikelihood_setExtscale
SourceLikelihood_extscale = libasp_pointlike.SourceLikelihood_extscale
SourceLikelihood_setMaxSize = libasp_pointlike.SourceLikelihood_setMaxSize
SourceLikelihood_maxSize = libasp_pointlike.SourceLikelihood_maxSize
SourceLikelihood_set_diffuse = libasp_pointlike.SourceLikelihood_set_diffuse
SourceLikelihood_set_exposure = libasp_pointlike.SourceLikelihood_set_exposure

class SLdisplay(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SLdisplay, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SLdisplay, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libasp_pointlike.new_SLdisplay(*args)
        try: self.this.append(this)
        except: self.this = this
    def value(*args): return libasp_pointlike.SLdisplay_value(*args)
    def integral(*args): return libasp_pointlike.SLdisplay_integral(*args)
    def name(*args): return libasp_pointlike.SLdisplay_name(*args)
    __swig_destroy__ = libasp_pointlike.delete_SLdisplay
    __del__ = lambda self : None;
SLdisplay_swigregister = libasp_pointlike.SLdisplay_swigregister
SLdisplay_swigregister(SLdisplay)

class iSource(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iSource, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iSource, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def set(*args): return libasp_pointlike.iSource_set(*args)
    def __call__(*args): return libasp_pointlike.iSource___call__(*args)
    def grad(*args): return libasp_pointlike.iSource_grad(*args)
    def get(*args): return libasp_pointlike.iSource_get(*args)
    def split(*args): return libasp_pointlike.iSource_split(*args)
    def parameterShiftsMax(*args): return libasp_pointlike.iSource_parameterShiftsMax(*args)
    def parameterShiftsMin(*args): return libasp_pointlike.iSource_parameterShiftsMin(*args)
    def sigma2(*args): return libasp_pointlike.iSource_sigma2(*args)
    def min(*args): return libasp_pointlike.iSource_min(*args)
    def max(*args): return libasp_pointlike.iSource_max(*args)
    def sigma(*args): return libasp_pointlike.iSource_sigma(*args)
    __swig_destroy__ = libasp_pointlike.delete_iSource
    __del__ = lambda self : None;
iSource_swigregister = libasp_pointlike.iSource_swigregister
iSource_swigregister(iSource)

class diskSource(iSource):
    __swig_setmethods__ = {}
    for _s in [iSource]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, diskSource, name, value)
    __swig_getmethods__ = {}
    for _s in [iSource]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, diskSource, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libasp_pointlike.new_diskSource(*args)
        try: self.this.append(this)
        except: self.this = this
    def set(*args): return libasp_pointlike.diskSource_set(*args)
    def parameterShiftsMax(*args): return libasp_pointlike.diskSource_parameterShiftsMax(*args)
    def parameterShiftsMin(*args): return libasp_pointlike.diskSource_parameterShiftsMin(*args)
    def get(*args): return libasp_pointlike.diskSource_get(*args)
    def __call__(*args): return libasp_pointlike.diskSource___call__(*args)
    def grad(*args): return libasp_pointlike.diskSource_grad(*args)
    __swig_destroy__ = libasp_pointlike.delete_diskSource
    __del__ = lambda self : None;
diskSource_swigregister = libasp_pointlike.diskSource_swigregister
diskSource_swigregister(diskSource)

class gaussSource(iSource):
    __swig_setmethods__ = {}
    for _s in [iSource]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, gaussSource, name, value)
    __swig_getmethods__ = {}
    for _s in [iSource]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, gaussSource, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libasp_pointlike.new_gaussSource(*args)
        try: self.this.append(this)
        except: self.this = this
    def set(*args): return libasp_pointlike.gaussSource_set(*args)
    def get(*args): return libasp_pointlike.gaussSource_get(*args)
    def __call__(*args): return libasp_pointlike.gaussSource___call__(*args)
    def grad(*args): return libasp_pointlike.gaussSource_grad(*args)
    __swig_destroy__ = libasp_pointlike.delete_gaussSource
    __del__ = lambda self : None;
gaussSource_swigregister = libasp_pointlike.gaussSource_swigregister
gaussSource_swigregister(gaussSource)

class radiusGaussSource(iSource):
    __swig_setmethods__ = {}
    for _s in [iSource]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, radiusGaussSource, name, value)
    __swig_getmethods__ = {}
    for _s in [iSource]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, radiusGaussSource, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libasp_pointlike.new_radiusGaussSource(*args)
        try: self.this.append(this)
        except: self.this = this
    def set(*args): return libasp_pointlike.radiusGaussSource_set(*args)
    def get(*args): return libasp_pointlike.radiusGaussSource_get(*args)
    def __call__(*args): return libasp_pointlike.radiusGaussSource___call__(*args)
    def grad(*args): return libasp_pointlike.radiusGaussSource_grad(*args)
    def split(*args): return libasp_pointlike.radiusGaussSource_split(*args)
    __swig_destroy__ = libasp_pointlike.delete_radiusGaussSource
    __del__ = lambda self : None;
radiusGaussSource_swigregister = libasp_pointlike.radiusGaussSource_swigregister
radiusGaussSource_swigregister(radiusGaussSource)

generator = libasp_pointlike.generator
class extendedSourcePDF(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, extendedSourcePDF, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, extendedSourcePDF, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libasp_pointlike.new_extendedSourcePDF(*args)
        try: self.this.append(this)
        except: self.this = this
    def value(*args): return libasp_pointlike.extendedSourcePDF_value(*args)
    def gradient(*args): return libasp_pointlike.extendedSourcePDF_gradient(*args)
    def __call__(*args): return libasp_pointlike.extendedSourcePDF___call__(*args)
    def gpdf(*args): return libasp_pointlike.extendedSourcePDF_gpdf(*args)
    def du_gpdf(*args): return libasp_pointlike.extendedSourcePDF_du_gpdf(*args)
    __swig_destroy__ = libasp_pointlike.delete_extendedSourcePDF
    __del__ = lambda self : None;
extendedSourcePDF_swigregister = libasp_pointlike.extendedSourcePDF_swigregister
extendedSourcePDF_swigregister(extendedSourcePDF)

class ExtendedSourcePseudoPSF(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExtendedSourcePseudoPSF, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExtendedSourcePseudoPSF, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libasp_pointlike.new_ExtendedSourcePseudoPSF(*args)
        try: self.this.append(this)
        except: self.this = this
    def pdf(*args): return libasp_pointlike.ExtendedSourcePseudoPSF_pdf(*args)
    def pointSourcePdf(*args): return libasp_pointlike.ExtendedSourcePseudoPSF_pointSourcePdf(*args)
    def gamma(*args): return libasp_pointlike.ExtendedSourcePseudoPSF_gamma(*args)
    def source(*args): return libasp_pointlike.ExtendedSourcePseudoPSF_source(*args)
    def setGamma(*args): return libasp_pointlike.ExtendedSourcePseudoPSF_setGamma(*args)
    def setSource(*args): return libasp_pointlike.ExtendedSourcePseudoPSF_setSource(*args)
    def gradient(*args): return libasp_pointlike.ExtendedSourcePseudoPSF_gradient(*args)
    def __call__(*args): return libasp_pointlike.ExtendedSourcePseudoPSF___call__(*args)
    def integral(*args): return libasp_pointlike.ExtendedSourcePseudoPSF_integral(*args)
    def integralSquare(*args): return libasp_pointlike.ExtendedSourcePseudoPSF_integralSquare(*args)
    __swig_destroy__ = libasp_pointlike.delete_ExtendedSourcePseudoPSF
    __del__ = lambda self : None;
ExtendedSourcePseudoPSF_swigregister = libasp_pointlike.ExtendedSourcePseudoPSF_swigregister
ExtendedSourcePseudoPSF_swigregister(ExtendedSourcePseudoPSF)

class Data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Data, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libasp_pointlike.new_Data(*args)
        try: self.this.append(this)
        except: self.this = this
    def add(*args): return libasp_pointlike.Data_add(*args)
    def addgti(*args): return libasp_pointlike.Data_addgti(*args)
    def map(*args): return libasp_pointlike.Data_map(*args)
    __swig_destroy__ = libasp_pointlike.delete_Data
    __del__ = lambda self : None;
    def minTime(*args): return libasp_pointlike.Data_minTime(*args)
    def maxTime(*args): return libasp_pointlike.Data_maxTime(*args)
    def info(*args): return libasp_pointlike.Data_info(*args)
    def combine_bands(*args): return libasp_pointlike.Data_combine_bands(*args)
    def write(*args): return libasp_pointlike.Data_write(*args)
    __swig_getmethods__["setHistoryFile"] = lambda x: libasp_pointlike.Data_setHistoryFile
    if _newclass:setHistoryFile = staticmethod(libasp_pointlike.Data_setHistoryFile)
    __swig_getmethods__["class_level"] = lambda x: libasp_pointlike.Data_class_level
    if _newclass:class_level = staticmethod(libasp_pointlike.Data_class_level)
    __swig_getmethods__["set_class_level"] = lambda x: libasp_pointlike.Data_set_class_level
    if _newclass:set_class_level = staticmethod(libasp_pointlike.Data_set_class_level)
    __swig_getmethods__["set_rot"] = lambda x: libasp_pointlike.Data_set_rot
    if _newclass:set_rot = staticmethod(libasp_pointlike.Data_set_rot)
    __swig_getmethods__["set_alignment"] = lambda x: libasp_pointlike.Data_set_alignment
    if _newclass:set_alignment = staticmethod(libasp_pointlike.Data_set_alignment)
    __swig_getmethods__["get_rot"] = lambda x: libasp_pointlike.Data_get_rot
    if _newclass:get_rot = staticmethod(libasp_pointlike.Data_get_rot)
    __swig_getmethods__["historyfile"] = lambda x: libasp_pointlike.Data_historyfile
    if _newclass:historyfile = staticmethod(libasp_pointlike.Data_historyfile)
    __swig_getmethods__["get_pointing"] = lambda x: libasp_pointlike.Data_get_pointing
    if _newclass:get_pointing = staticmethod(libasp_pointlike.Data_get_pointing)
    __swig_getmethods__["inTimeRange"] = lambda x: libasp_pointlike.Data_inTimeRange
    if _newclass:inTimeRange = staticmethod(libasp_pointlike.Data_inTimeRange)
    __swig_getmethods__["setEnergyBins"] = lambda x: libasp_pointlike.Data_setEnergyBins
    if _newclass:setEnergyBins = staticmethod(libasp_pointlike.Data_setEnergyBins)
    __swig_getmethods__["setPhotonBinner"] = lambda x: libasp_pointlike.Data_setPhotonBinner
    if _newclass:setPhotonBinner = staticmethod(libasp_pointlike.Data_setPhotonBinner)
    __swig_getmethods__["zenith_angle_cut"] = lambda x: libasp_pointlike.Data_zenith_angle_cut
    if _newclass:zenith_angle_cut = staticmethod(libasp_pointlike.Data_zenith_angle_cut)
    __swig_getmethods__["set_zenith_angle_cut"] = lambda x: libasp_pointlike.Data_set_zenith_angle_cut
    if _newclass:set_zenith_angle_cut = staticmethod(libasp_pointlike.Data_set_zenith_angle_cut)
    __swig_getmethods__["theta_cut"] = lambda x: libasp_pointlike.Data_theta_cut
    if _newclass:theta_cut = staticmethod(libasp_pointlike.Data_theta_cut)
    __swig_getmethods__["set_theta_cut"] = lambda x: libasp_pointlike.Data_set_theta_cut
    if _newclass:set_theta_cut = staticmethod(libasp_pointlike.Data_set_theta_cut)
    __swig_getmethods__["useEarthCoordinates"] = lambda x: libasp_pointlike.Data_useEarthCoordinates
    if _newclass:useEarthCoordinates = staticmethod(libasp_pointlike.Data_useEarthCoordinates)
Data_swigregister = libasp_pointlike.Data_swigregister
Data_swigregister(Data)
Data_setHistoryFile = libasp_pointlike.Data_setHistoryFile
Data_class_level = libasp_pointlike.Data_class_level
Data_set_class_level = libasp_pointlike.Data_set_class_level
Data_set_rot = libasp_pointlike.Data_set_rot
Data_set_alignment = libasp_pointlike.Data_set_alignment
Data_get_rot = libasp_pointlike.Data_get_rot
Data_historyfile = libasp_pointlike.Data_historyfile
Data_get_pointing = libasp_pointlike.Data_get_pointing
Data_inTimeRange = libasp_pointlike.Data_inTimeRange
Data_setEnergyBins = libasp_pointlike.Data_setEnergyBins
Data_setPhotonBinner = libasp_pointlike.Data_setPhotonBinner
Data_zenith_angle_cut = libasp_pointlike.Data_zenith_angle_cut
Data_set_zenith_angle_cut = libasp_pointlike.Data_set_zenith_angle_cut
Data_theta_cut = libasp_pointlike.Data_theta_cut
Data_set_theta_cut = libasp_pointlike.Data_set_theta_cut
Data_useEarthCoordinates = libasp_pointlike.Data_useEarthCoordinates

class ResultsFile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResultsFile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResultsFile, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libasp_pointlike.new_ResultsFile(*args)
        try: self.this.append(this)
        except: self.this = this
    def fill(*args): return libasp_pointlike.ResultsFile_fill(*args)
    def writeAndClose(*args): return libasp_pointlike.ResultsFile_writeAndClose(*args)
    __swig_destroy__ = libasp_pointlike.delete_ResultsFile
    __del__ = lambda self : None;
ResultsFile_swigregister = libasp_pointlike.ResultsFile_swigregister
ResultsFile_swigregister(ResultsFile)

class CanInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CanInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CanInfo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libasp_pointlike.new_CanInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    def value(*args): return libasp_pointlike.CanInfo_value(*args)
    def sigma(*args): return libasp_pointlike.CanInfo_sigma(*args)
    def dir(*args): return libasp_pointlike.CanInfo_dir(*args)
    def ra(*args): return libasp_pointlike.CanInfo_ra(*args)
    def dec(*args): return libasp_pointlike.CanInfo_dec(*args)
    def is2bdeleted(*args): return libasp_pointlike.CanInfo_is2bdeleted(*args)
    def isSource(*args): return libasp_pointlike.CanInfo_isSource(*args)
    def fit(*args): return libasp_pointlike.CanInfo_fit(*args)
    def weighted_count(*args): return libasp_pointlike.CanInfo_weighted_count(*args)
    def skipped(*args): return libasp_pointlike.CanInfo_skipped(*args)
    def hasStrongNeighbor(*args): return libasp_pointlike.CanInfo_hasStrongNeighbor(*args)
    def strongNeighbor(*args): return libasp_pointlike.CanInfo_strongNeighbor(*args)
    def setDelete(*args): return libasp_pointlike.CanInfo_setDelete(*args)
    def setSource(*args): return libasp_pointlike.CanInfo_setSource(*args)
    def set_total_value(*args): return libasp_pointlike.CanInfo_set_total_value(*args)
    def set_sigma(*args): return libasp_pointlike.CanInfo_set_sigma(*args)
    def set_dir(*args): return libasp_pointlike.CanInfo_set_dir(*args)
    def set_fit(*args): return libasp_pointlike.CanInfo_set_fit(*args)
    def set_skipped(*args): return libasp_pointlike.CanInfo_set_skipped(*args)
    def setHasStrongNeighbor(*args): return libasp_pointlike.CanInfo_setHasStrongNeighbor(*args)
    def setStrongNeighbor(*args): return libasp_pointlike.CanInfo_setStrongNeighbor(*args)
    __swig_destroy__ = libasp_pointlike.delete_CanInfo
    __del__ = lambda self : None;
CanInfo_swigregister = libasp_pointlike.CanInfo_swigregister
CanInfo_swigregister(CanInfo)

class SourceFinder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SourceFinder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SourceFinder, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libasp_pointlike.new_SourceFinder(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libasp_pointlike.delete_SourceFinder
    __del__ = lambda self : None;
    def getCandidates(*args): return libasp_pointlike.SourceFinder_getCandidates(*args)
    def examineRegion(*args): return libasp_pointlike.SourceFinder_examineRegion(*args)
    def prune_neighbors(*args): return libasp_pointlike.SourceFinder_prune_neighbors(*args)
    def createReg(*args): return libasp_pointlike.SourceFinder_createReg(*args)
    def createTable(*args): return libasp_pointlike.SourceFinder_createTable(*args)
    def getMap(*args): return libasp_pointlike.SourceFinder_getMap(*args)
    def candidateList(*args): return libasp_pointlike.SourceFinder_candidateList(*args)
    def createFitsFile(*args): return libasp_pointlike.SourceFinder_createFitsFile(*args)
    def createRegFile(*args): return libasp_pointlike.SourceFinder_createRegFile(*args)
    def run(*args): return libasp_pointlike.SourceFinder_run(*args)
    __swig_getmethods__["setParameters"] = lambda x: libasp_pointlike.SourceFinder_setParameters
    if _newclass:setParameters = staticmethod(libasp_pointlike.SourceFinder_setParameters)
SourceFinder_swigregister = libasp_pointlike.SourceFinder_swigregister
SourceFinder_swigregister(SourceFinder)
SourceFinder_setParameters = libasp_pointlike.SourceFinder_setParameters

class Draw(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Draw, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Draw, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libasp_pointlike.new_Draw(*args)
        try: self.this.append(this)
        except: self.this = this
    def region(*args): return libasp_pointlike.Draw_region(*args)
    def TS(*args): return libasp_pointlike.Draw_TS(*args)
    def density(*args): return libasp_pointlike.Draw_density(*args)
    def sky(*args): return libasp_pointlike.Draw_sky(*args)
    def googleSky(*args): return libasp_pointlike.Draw_googleSky(*args)
    def galactic(*args): return libasp_pointlike.Draw_galactic(*args)
    def equatorial(*args): return libasp_pointlike.Draw_equatorial(*args)
    def projection(*args): return libasp_pointlike.Draw_projection(*args)
    def zenith(*args): return libasp_pointlike.Draw_zenith(*args)
    def use_exposure(*args): return libasp_pointlike.Draw_use_exposure(*args)
    def set_layers(*args): return libasp_pointlike.Draw_set_layers(*args)
    __swig_destroy__ = libasp_pointlike.delete_Draw
    __del__ = lambda self : None;
Draw_swigregister = libasp_pointlike.Draw_swigregister
Draw_swigregister(Draw)

class SkyDensity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SkyDensity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SkyDensity, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libasp_pointlike.new_SkyDensity(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return libasp_pointlike.SkyDensity___call__(*args)
    __swig_destroy__ = libasp_pointlike.delete_SkyDensity
    __del__ = lambda self : None;
SkyDensity_swigregister = libasp_pointlike.SkyDensity_swigregister
SkyDensity_swigregister(SkyDensity)

class SimpleTSmap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleTSmap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleTSmap, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libasp_pointlike.new_SimpleTSmap(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libasp_pointlike.delete_SimpleTSmap
    __del__ = lambda self : None;
    def value(*args): return libasp_pointlike.SimpleTSmap_value(*args)
    def integral(*args): return libasp_pointlike.SimpleTSmap_integral(*args)
    def name(*args): return libasp_pointlike.SimpleTSmap_name(*args)
    def run(*args): return libasp_pointlike.SimpleTSmap_run(*args)
    def save(*args): return libasp_pointlike.SimpleTSmap_save(*args)
    def restore(*args): return libasp_pointlike.SimpleTSmap_restore(*args)
    def size(*args): return libasp_pointlike.SimpleTSmap_size(*args)
    def nside(*args): return libasp_pointlike.SimpleTSmap_nside(*args)
    def clear(*args): return libasp_pointlike.SimpleTSmap_clear(*args)
    def __getitem__(*args): return libasp_pointlike.SimpleTSmap___getitem__(*args)
    def __call__(*args): return libasp_pointlike.SimpleTSmap___call__(*args)
SimpleTSmap_swigregister = libasp_pointlike.SimpleTSmap_swigregister
SimpleTSmap_swigregister(SimpleTSmap)

class Source(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Source, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Source, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libasp_pointlike.new_Source(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libasp_pointlike.delete_Source
    __del__ = lambda self : None;
    def localize(*args): return libasp_pointlike.Source_localize(*args)
    def name(*args): return libasp_pointlike.Source_name(*args)
    def dir(*args): return libasp_pointlike.Source_dir(*args)
    def seed_dir(*args): return libasp_pointlike.Source_seed_dir(*args)
    def moved(*args): return libasp_pointlike.Source_moved(*args)
    def info(*args): return libasp_pointlike.Source_info(*args)
    __swig_getmethods__["header"] = lambda x: libasp_pointlike.Source_header
    if _newclass:header = staticmethod(libasp_pointlike.Source_header)
    def TS(*args): return libasp_pointlike.Source_TS(*args)
    def seedTS(*args): return libasp_pointlike.Source_seedTS(*args)
    def sigma(*args): return libasp_pointlike.Source_sigma(*args)
    def fit(*args): return libasp_pointlike.Source_fit(*args)
    def neighbor(*args): return libasp_pointlike.Source_neighbor(*args)
    def set_neighbor(*args): return libasp_pointlike.Source_set_neighbor(*args)
Source_swigregister = libasp_pointlike.Source_swigregister
Source_swigregister(Source)
Source_header = libasp_pointlike.Source_header

class SourceList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SourceList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SourceList, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libasp_pointlike.new_SourceList(*args)
        try: self.this.append(this)
        except: self.this = this
    def sort_TS(*args): return libasp_pointlike.SourceList_sort_TS(*args)
    def sort_ra(*args): return libasp_pointlike.SourceList_sort_ra(*args)
    def refit(*args): return libasp_pointlike.SourceList_refit(*args)
    def filter_TS(*args): return libasp_pointlike.SourceList_filter_TS(*args)
    def dump(*args): return libasp_pointlike.SourceList_dump(*args)
    def createRegFile(*args): return libasp_pointlike.SourceList_createRegFile(*args)
    __swig_getmethods__["set_data"] = lambda x: libasp_pointlike.SourceList_set_data
    if _newclass:set_data = staticmethod(libasp_pointlike.SourceList_set_data)
    __swig_getmethods__["data"] = lambda x: libasp_pointlike.SourceList_data
    if _newclass:data = staticmethod(libasp_pointlike.SourceList_data)
    __swig_getmethods__["set_group_radius"] = lambda x: libasp_pointlike.SourceList_set_group_radius
    if _newclass:set_group_radius = staticmethod(libasp_pointlike.SourceList_set_group_radius)
    def __getitem__(*args): return libasp_pointlike.SourceList___getitem__(*args)
    def __len__(*args): return libasp_pointlike.SourceList___len__(*args)
    def append(*args): return libasp_pointlike.SourceList_append(*args)
    __swig_destroy__ = libasp_pointlike.delete_SourceList
    __del__ = lambda self : None;
SourceList_swigregister = libasp_pointlike.SourceList_swigregister
SourceList_swigregister(SourceList)
SourceList_set_data = libasp_pointlike.SourceList_set_data
SourceList_data = libasp_pointlike.SourceList_data
SourceList_set_group_radius = libasp_pointlike.SourceList_set_group_radius

class FlexibleBinner(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FlexibleBinner, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FlexibleBinner, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libasp_pointlike.new_FlexibleBinner(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libasp_pointlike.delete_FlexibleBinner
    __del__ = lambda self : None;
    def __call__(*args): return libasp_pointlike.FlexibleBinner___call__(*args)
FlexibleBinner_swigregister = libasp_pointlike.FlexibleBinner_swigregister
FlexibleBinner_swigregister(FlexibleBinner)

class HealpixDiffuseFunc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HealpixDiffuseFunc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HealpixDiffuseFunc, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libasp_pointlike.new_HealpixDiffuseFunc(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libasp_pointlike.delete_HealpixDiffuseFunc
    __del__ = lambda self : None;
    def isotropicFlux(*args): return libasp_pointlike.HealpixDiffuseFunc_isotropicFlux(*args)
    def value(*args): return libasp_pointlike.HealpixDiffuseFunc_value(*args)
    def name(*args): return libasp_pointlike.HealpixDiffuseFunc_name(*args)
    def integral(*args): return libasp_pointlike.HealpixDiffuseFunc_integral(*args)
    def layers(*args): return libasp_pointlike.HealpixDiffuseFunc_layers(*args)
HealpixDiffuseFunc_swigregister = libasp_pointlike.HealpixDiffuseFunc_swigregister
HealpixDiffuseFunc_swigregister(HealpixDiffuseFunc)

class BandBackground(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BandBackground, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BandBackground, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libasp_pointlike.new_BandBackground(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libasp_pointlike.delete_BandBackground
    __del__ = lambda self : None;
    def __call__(*args): return libasp_pointlike.BandBackground___call__(*args)
    def average(*args): return libasp_pointlike.BandBackground_average(*args)
    __swig_getmethods__["set_verbose"] = lambda x: libasp_pointlike.BandBackground_set_verbose
    if _newclass:set_verbose = staticmethod(libasp_pointlike.BandBackground_set_verbose)
BandBackground_swigregister = libasp_pointlike.BandBackground_swigregister
BandBackground_swigregister(BandBackground)
BandBackground_set_verbose = libasp_pointlike.BandBackground_set_verbose

class Alignment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Alignment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Alignment, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = libasp_pointlike.new_Alignment(*args)
        try: self.this.append(this)
        except: self.this = this
    def rotation(*args): return libasp_pointlike.Alignment_rotation(*args)
    def rotate(*args): return libasp_pointlike.Alignment_rotate(*args)
    def active(*args): return libasp_pointlike.Alignment_active(*args)
    __swig_destroy__ = libasp_pointlike.delete_Alignment
    __del__ = lambda self : None;
Alignment_swigregister = libasp_pointlike.Alignment_swigregister
Alignment_swigregister(Alignment)

class SourceVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SourceVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SourceVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return libasp_pointlike.SourceVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return libasp_pointlike.SourceVector___nonzero__(*args)
    def __len__(*args): return libasp_pointlike.SourceVector___len__(*args)
    def pop(*args): return libasp_pointlike.SourceVector_pop(*args)
    def __getslice__(*args): return libasp_pointlike.SourceVector___getslice__(*args)
    def __setslice__(*args): return libasp_pointlike.SourceVector___setslice__(*args)
    def __delslice__(*args): return libasp_pointlike.SourceVector___delslice__(*args)
    def __delitem__(*args): return libasp_pointlike.SourceVector___delitem__(*args)
    def __getitem__(*args): return libasp_pointlike.SourceVector___getitem__(*args)
    def __setitem__(*args): return libasp_pointlike.SourceVector___setitem__(*args)
    def append(*args): return libasp_pointlike.SourceVector_append(*args)
    def empty(*args): return libasp_pointlike.SourceVector_empty(*args)
    def size(*args): return libasp_pointlike.SourceVector_size(*args)
    def clear(*args): return libasp_pointlike.SourceVector_clear(*args)
    def swap(*args): return libasp_pointlike.SourceVector_swap(*args)
    def get_allocator(*args): return libasp_pointlike.SourceVector_get_allocator(*args)
    def begin(*args): return libasp_pointlike.SourceVector_begin(*args)
    def end(*args): return libasp_pointlike.SourceVector_end(*args)
    def rbegin(*args): return libasp_pointlike.SourceVector_rbegin(*args)
    def rend(*args): return libasp_pointlike.SourceVector_rend(*args)
    def pop_back(*args): return libasp_pointlike.SourceVector_pop_back(*args)
    def erase(*args): return libasp_pointlike.SourceVector_erase(*args)
    def __init__(self, *args): 
        this = libasp_pointlike.new_SourceVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return libasp_pointlike.SourceVector_push_back(*args)
    def front(*args): return libasp_pointlike.SourceVector_front(*args)
    def back(*args): return libasp_pointlike.SourceVector_back(*args)
    def assign(*args): return libasp_pointlike.SourceVector_assign(*args)
    def resize(*args): return libasp_pointlike.SourceVector_resize(*args)
    def insert(*args): return libasp_pointlike.SourceVector_insert(*args)
    def reserve(*args): return libasp_pointlike.SourceVector_reserve(*args)
    def capacity(*args): return libasp_pointlike.SourceVector_capacity(*args)
    __swig_destroy__ = libasp_pointlike.delete_SourceVector
    __del__ = lambda self : None;
SourceVector_swigregister = libasp_pointlike.SourceVector_swigregister
SourceVector_swigregister(SourceVector)

class StringDoubleMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringDoubleMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringDoubleMap, name)
    __repr__ = _swig_repr
    def iterator(*args): return libasp_pointlike.StringDoubleMap_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return libasp_pointlike.StringDoubleMap___nonzero__(*args)
    def __len__(*args): return libasp_pointlike.StringDoubleMap___len__(*args)
    def __getitem__(*args): return libasp_pointlike.StringDoubleMap___getitem__(*args)
    def __delitem__(*args): return libasp_pointlike.StringDoubleMap___delitem__(*args)
    def has_key(*args): return libasp_pointlike.StringDoubleMap_has_key(*args)
    def keys(*args): return libasp_pointlike.StringDoubleMap_keys(*args)
    def values(*args): return libasp_pointlike.StringDoubleMap_values(*args)
    def items(*args): return libasp_pointlike.StringDoubleMap_items(*args)
    def __contains__(*args): return libasp_pointlike.StringDoubleMap___contains__(*args)
    def key_iterator(*args): return libasp_pointlike.StringDoubleMap_key_iterator(*args)
    def value_iterator(*args): return libasp_pointlike.StringDoubleMap_value_iterator(*args)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __setitem__(*args): return libasp_pointlike.StringDoubleMap___setitem__(*args)
    def __init__(self, *args): 
        this = libasp_pointlike.new_StringDoubleMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(*args): return libasp_pointlike.StringDoubleMap_empty(*args)
    def size(*args): return libasp_pointlike.StringDoubleMap_size(*args)
    def clear(*args): return libasp_pointlike.StringDoubleMap_clear(*args)
    def swap(*args): return libasp_pointlike.StringDoubleMap_swap(*args)
    def get_allocator(*args): return libasp_pointlike.StringDoubleMap_get_allocator(*args)
    def begin(*args): return libasp_pointlike.StringDoubleMap_begin(*args)
    def end(*args): return libasp_pointlike.StringDoubleMap_end(*args)
    def rbegin(*args): return libasp_pointlike.StringDoubleMap_rbegin(*args)
    def rend(*args): return libasp_pointlike.StringDoubleMap_rend(*args)
    def count(*args): return libasp_pointlike.StringDoubleMap_count(*args)
    def erase(*args): return libasp_pointlike.StringDoubleMap_erase(*args)
    def find(*args): return libasp_pointlike.StringDoubleMap_find(*args)
    def lower_bound(*args): return libasp_pointlike.StringDoubleMap_lower_bound(*args)
    def upper_bound(*args): return libasp_pointlike.StringDoubleMap_upper_bound(*args)
    __swig_destroy__ = libasp_pointlike.delete_StringDoubleMap
    __del__ = lambda self : None;
StringDoubleMap_swigregister = libasp_pointlike.StringDoubleMap_swigregister
StringDoubleMap_swigregister(StringDoubleMap)



