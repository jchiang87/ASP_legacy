<?xml version="1.0" encoding="UTF-8"?>
<pipeline
   xmlns="http://glast-ground.slac.stanford.edu/pipeline"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://glast-ground.slac.stanford.edu/pipeline http://glast-ground.slac.stanford.edu/Pipeline-II/schemas/2.0/pipeline.xsd">
<!-- $Header$
-->
<task name="GRB_refinement" version="3.7" type="Data">
  <variables>
    <var name="ST_INST">"/nfs/farm/g/glast/u30/builds/rh9_gcc32/ScienceTools/ScienceTools-v9r4p1"</var>
    <var name="BINDIR">rh9_gcc32</var>
  </variables>
   <prerequisites>
      <prerequisite name="GCN_NOTICE" type="string"/>
      <prerequisite name="GRB_ID" type="integer"/>
      <prerequisite name="logicalPath" type="string"/>
      <prerequisite name="TSTART" type="integer"/>
      <prerequisite name="TSTOP" type="integer"/>
      <prerequisite name="output_dir" type="string"/>
      <prerequisite name="ASP_PATH" type="string"/>
      <prerequisite name="GRBASPROOT" type="string"/>
      <prerequisite name="PIPELINESERVER" type="string"/>
   </prerequisites>
   <process name="catalogQuery">
     <script><![CDATA[
       def query(outfile, path, TSTART, TSTOP):
           output = pipeline.createFile(outfile)
           opt1 = '(%(TSTART)i <= nMetStart && nMetStop <= %(TSTOP)i)' % locals()
           opt2 = '(nMetStart <= %(TSTART)i && %(TSTART)i <= nMetStop)' % locals()
           opt3 = '(nMetStart <= %(TSTOP)i && %(TSTOP)i <= nMetStop)' % locals()
           query = ('DataType == \"%s\" && (%s || %s || %s)' 
                    % (path, opt1, opt2, opt3))
           datasetList = datacatalog.getDatasets(logicalPath+'/*', query)
           datasetList.writeToFile(output, 1)
           pipeline.writeFile(output)
       query("Ft1FileList", "FT1", TSTART, TSTOP)
       query("Ft2FileList", "FT2", TSTART, TSTOP)
       ]]></script>
   </process>
   <process name="extractLatData">
      <variables>
         <var name="OUTPUTDIR">${output_dir}</var>
      </variables>
      <job executable="${GRBASPROOT}/${BINDIR}/extractLatData.sh"
           batchOptions="-q short"/>
      <depends>
          <after process="catalogQuery" status="SUCCESS"/>
      </depends>
   </process>
   <process name="refinePosition">
      <variables>
         <var name="OUTPUTDIR">${output_dir}</var>
      </variables>
      <job executable="${GRBASPROOT}/${BINDIR}/refinePosition.sh"
           batchOptions="-q short"/>
      <depends>
          <after process="extractLatData" status="SUCCESS"/>
      </depends>
   </process>
   <process name="tsMap">
      <variables>
         <var name="OUTPUTDIR">${output_dir}</var>
      </variables>
      <job executable="${GRBASPROOT}/${BINDIR}/tsMap.sh" 
           batchOptions="-q long"/>
      <depends>
          <after process="refinePosition" status="SUCCESS"/>
      </depends>
   </process>
   <process name="LatGrbSpectrum">
      <variables>
         <var name="OUTPUTDIR">${output_dir}</var>
      </variables>
      <job executable="${GRBASPROOT}/${BINDIR}/LatGrbSpectrum.sh"
           batchOptions="-q short"/>
      <depends>
          <after process="refinePosition" status="SUCCESS"/>
      </depends>
   </process>
   <process>
      <variables>
         <var name="OUTPUTDIR">${output_dir}</var>
      </variables>
     <job executable="${GRBASPROOT}/${BINDIR}/makeRefinementPlots.sh"
          batchOptions="-q short"/>
     <depends>
       <after process="tsMap" status="SUCCESS">  
       <after process="LatGrbSpectrum" status="SUCCESS">  
     </depends>
   </process>
   <process name='registerPlots'>
     <script><![CDATA[
     dataTypes = ('COUNTSMAP', 'SPECTRUM', 'LIGHTCURVE', 'ERRORCONTOURS')
     files = ('countsMap.png', 'countsSpectra.png', 'lightCurve.png',
              'positionErrorContours.png')
     for dataType, outfile in zip(dataTypes, files):
         logicalPath = '/ASP/Results/GRB:%i/%s' % (GRB_ID, outfile)
         filePath = '%s/%s' % (output_dir, outfile)
         datacatalog.registerDataset(dataType, logicalPath, filePath)
      ]]></script>
     <depends>
       <after process="makeRefinementPlots" status="SUCCESS"/>
     </depends>
   </process>
</task>
</pipeline>
