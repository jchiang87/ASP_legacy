<?xml version="1.0" encoding="UTF-8"?>
<pipeline
   xmlns="http://glast-ground.slac.stanford.edu/pipeline"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://glast-ground.slac.stanford.edu/pipeline http://glast-ground.slac.stanford.edu/Pipeline-II/schemas/2.0/pipeline.xsd">
<!-- $Header$
-->
<task name="GRB_afterglow_launcher" version="3.1" type="Data">
  <variables>
    <var name="BINDIR">bin/redhat6-x86_64-64bit-gcc44-Optimized</var>
    <var name="datacatalog_imp">datacatalog</var>
    <var name="logRoot">/nfs/farm/g/glast/u41/ASP/log_files</var>
  </variables>
  <prerequisites>
    <prerequisite name="folder" type="string"/>
    <prerequisite name="TSTART" type="integer"/>
    <prerequisite name="TSTOP" type="integer"/>
    <prerequisite name="OUTPUTDIR" type="string"/>
    <prerequisite name="ASP_PATH" type="string"/>
    <prerequisite name="GRBASPROOT" type="string"/>
    <prerequisite name="PIPELINESERVER" type="string"/>
  </prerequisites>
  <process name="catalogQuery">
    <script>
      <![CDATA[
        print "using datacatalog implementation: ", datacatalog_imp
        datacat = eval(datacatalog_imp)
        def query(outfile, path, TSTART, TSTOP, folder):
            output = pipeline.createFile(outfile)
            opt1 = '(%(TSTART)i <= nMetStart && nMetStop <= %(TSTOP)i)' % locals()
            opt2 = '(nMetStart <= %(TSTART)i && %(TSTART)i <= nMetStop)' % locals()
            opt3 = '(nMetStart <= %(TSTOP)i && %(TSTOP)i <= nMetStop)' % locals()
            query = ('DataType == \"%s\" && (%s || %s || %s)' 
                     % (path, opt1, opt2, opt3))
            datasetList = datacat.getDatasets(folder+'/*', query)
            datasetList.writeToFile(output, 1)
            pipeline.writeFile(output)
        query("Ft1FileList", "FT1", TSTART, TSTOP, folder)
        query("Ft2FileList", "FT2", TSTART, TSTOP, folder)
    ]]></script>
  </process>
  <process name="launchAfterglowStream">
    <job executable="${GRBASPROOT}/${BINDIR}/launchAfterglowStream.sh"
         batchOptions="-q glastdataq " allocationGroup="glastdata"/>
    <depends>
      <after process="catalogQuery" status="SUCCESS"/>
    </depends>
  </process>
</task>
</pipeline>
