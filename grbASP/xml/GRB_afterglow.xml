<?xml version="1.0" encoding="UTF-8"?>
<pipeline
    xmlns="http://glast-ground.slac.stanford.edu/pipeline"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://glast-ground.slac.stanford.edu/pipeline http://glast-ground.slac.stanford.edu/Pipeline-II/schemas/2.0/pipeline.xsd">
  <!-- $Header$
  -->
<task name="GRB_afterglow" version="7.5" type="Data">
  <variables>
    <var name="BINDIR">rhel4_gcc34opt</var>
    <var name="datacatalog_imp">datacatalog</var>
    <var name="outputFolder">/ASP/Results/GRB/afterglow</var>
    <var name="xrootd_folder">/ASP/GRB/afterglow</var>
    <var name="GALPROP_MODEL">/afs/slac/g/glast/ground/ASP/GALPROP_MODEL/gll_iem_v02.fit</var>
    <var name="logRoot">/nfs/farm/g/glast/u52/ASP/log_files</var>
  </variables>
  <prerequisites>
    <prerequisite name="logicalPath" type="string"/>
    <prerequisite name="TSTART" type="integer"/>
    <prerequisite name="TSTOP" type="integer"/>
    <prerequisite name="OUTPUTDIR" type="string"/>
    <prerequisite name="GRBPARS" type="string"/>
    <prerequisite name="ASP_PATH" type="string"/>
    <prerequisite name="GRBASPROOT" type="string"/>
    <prerequisite name="PIPELINESERVER" type="string"/>
  </prerequisites>
  <process name="catalogQuery">
    <script><![CDATA[
      print "using datacatalog implementation: ", datacatalog_imp
      datacat = eval(datacatalog_imp)
      def query(outfile, path, TSTART, TSTOP):
          output = pipeline.createFile(outfile)
          opt1 = '(%(TSTART)i <= nMetStart && nMetStop <= %(TSTOP)i)' % locals()
          opt2 = '(nMetStart <= %(TSTART)i && %(TSTART)i <= nMetStop)'% locals()
          opt3 = '(nMetStart <= %(TSTOP)i && %(TSTOP)i <= nMetStop)' % locals()
          query = ('DataType == \"%s\" && (%s || %s || %s)' 
                   % (path, opt1, opt2, opt3))
          datasetList = datacat.getDatasets(logicalPath+'/*', query)
          datasetList.writeToFile(output, 1)
          pipeline.writeFile(output)
      query("Ft1FileList", "FT1", TSTART, TSTOP)
      query("Ft2FileList", "FT2", TSTART, TSTOP)
      ]]></script>
  </process>
  <process name="afterglowData">
    <job executable="${GRBASPROOT}/${BINDIR}/afterglowData.sh"
         batchOptions="-q short"/>
    <depends>
      <after process="catalogQuery" status="SUCCESS"/>
    </depends>
  </process>
  <process name="afterglowDiffResps">
    <job executable="${GRBASPROOT}/${BINDIR}/afterglowDiffResps.sh" 
         batchOptions=" -q glastdataq " allocationGroup="glastdata" />
    <depends>
      <after process="afterglowData" status="SUCCESS"/>
    </depends>
  </process>

  <process name="afterglowLivetimeCube">
    <job executable="${GRBASPROOT}/${BINDIR}/afterglowLivetimeCube.sh" 
         batchOptions=" -q glastdataq " allocationGroup="glastdata" />
    <depends>
      <after process="afterglowData" status="SUCCESS"/>
    </depends>
  </process>

  <process name="afterglowExpMap">
    <job executable="${GRBASPROOT}/${BINDIR}/afterglowExpMap.sh" 
         batchOptions=" -q glastdataq " allocationGroup="glastdata" />
    <depends>
      <after process="afterglowLivetimeCube" status="SUCCESS"/>
    </depends>
  </process>

  <process name="afterglowAnalysis">
    <job executable="${GRBASPROOT}/${BINDIR}/afterglowAnalysis.sh" 
         batchOptions=" -q glastdataq " allocationGroup="glastdata" />
    <depends>
      <after process="afterglowExpMap" status="SUCCESS"/>
      <after process="afterglowDiffResps" status="SUCCESS"/>
    </depends>
  </process>

  <process name="makeAfterglowPlots">
    <job executable="${GRBASPROOT}/${BINDIR}/makeAfterglowPlots.sh"
         batchOptions=" -q short " allocationGroup="glastdata" />
    <depends>
      <after process="afterglowAnalysis" status="SUCCESS"/>
    </depends>
  </process>

  <process name="registerPlots">
    <script>
      <![CDATA[
        print "using datacatalog implementation: ", datacatalog_imp
        datacat = eval(datacatalog_imp)
        priorProcess = pipeline.getProcessInstance("makeAfterglowPlots")
        grb_id = priorProcess.getVariable('GRB_ID')
        dataTypes = ('SPECTRUM_AFTERGLOW', 'LIGHTCURVE_AFTERGLOW')
        prefixes = ('countsSpectra', 'lightCurve')
        files = ['%s_afterglow_%i.png' % (prefix, grb_id)
                 for prefix in prefixes]
        for dataType, outfile in zip(dataTypes, files):
            attributes = 'nGrbId=%i' % grb_id
            print attributes
            logicalPath = '%s/%s:%s' % (outputFolder, dataType, outfile)
            print logicalPath
            filePath = '%s/%s' % (OUTPUTDIR, outfile)
            print filePath
            datacat.registerDataset(dataType, logicalPath, filePath, 
                                    attributes)
       ]]>
    </script>
    <depends>
      <after process="makeAfterglowPlots" status="SUCCESS"/>
    </depends>
  </process>

  <process name="createArchive">
    <job executable="${GRBASPROOT}/${BINDIR}/createAfterglowTarball.sh"
         batchOptions="-q short" />
    <depends>
      <after process="registerPlots" status="SUCCESS" />
    </depends>
  </process>

  <process name="registerArchive">
    <script>
      <![CDATA[
        createArchive = pipeline.getProcessInstance("createArchive")
        dataType = "GRB_AFTERGLOW_ARCH"

        grb_id = createArchive.getVariable("grb_id")
        filePath = createArchive.getVariable("tarball_name")

        attributes = 'nGrbId=%s' % grb_id
        print attributes

        outfile = filePath.split('/')[-1]
        logicalPath = '%s/%s:%s' % (outputFolder, dataType, outfile)
        print logicalPath

        if filePath.find('root') == 0:
           filePath += "@SLAC_XROOT"
        print filePath

        datacatalog.registerDataset(dataType, logicalPath, filePath,
                                    attributes)
        
       ]]>
    </script>
    <depends>
      <after process="createArchive" status="SUCCESS"/>
    </depends>
  </process>

  <process name="clean_up_files">
    <job executable="${GRBASPROOT}/${BINDIR}/grbASP_clean_up_files.sh"
         batchOptions="-q short" />
    <depends>
      <after process="registerArchive" status="SUCCESS" />
    </depends>
  </process>


</task> <!-- GRB_afterglow -->
</pipeline>
