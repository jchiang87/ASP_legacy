// -*- mode: c++ -*-
/**
 * @file grbASP.in
 * @brief Interface file for SWIG generated wrappers.
 * @author J. Chiang <jchiang@slac.stanford.edu>
 *
 * $Header$
 */
%module grbASP
%{
#include <stdexcept>
#include <string>
#include <vector>
// #include "astro/JulianDate.h"
// #include "astro/SkyDir.h"
// #include "astro/SkyProj.h"
// #include "astro/SolarSystem.h"
// astro::JulianDate jd_from_MET(double met) {
//    return astro::JulianDate(astro::JulianDate::missionStart() + met/8.64e4);
// }
#include "grbASP/Event.h"
#include "grbASP/ClusterAlg.h"
#include "grbASP/EventClusters.h"
#include "grbASP/PsfClusters.h"
#include "grbASP/ScData.h"
%}
%include stl.i
%exception {
   try {
      $action
   } catch (std::exception & eObj) {
      PyErr_SetString(PyExc_RuntimeError, const_cast<char*>(eObj.what()));
      return NULL;
   }
}
%template(DoublePair) std::pair<double, double>;
%template(DoubleVector) std::vector<double>;
%template(PairVector) std::vector< std::pair<double, double> >;
%template(ClusterAlgResults) std::pair<std::pair<double, double>, astro::SkyDir>;
// %include $(ASTROROOT)/astro/JulianDate.h
// %include $(ASTROROOT)/astro/SkyProj.h
// %include $(ASTROROOT)/astro/SkyDir.h
// %include $(ASTROROOT)/astro/SolarSystem.h
// astro::JulianDate jd_from_MET(double met);
%include $(GRBASPROOT)/grbASP/ScData.h
%include $(GRBASPROOT)/grbASP/Event.h
%template(EventVector) std::vector<grbASP::Event>;
%include $(GRBASPROOT)/grbASP/ClusterAlg.h
%include $(GRBASPROOT)/grbASP/EventClusters.h
%include $(GRBASPROOT)/grbASP/PsfClusters.h
// %extend astro::SkyDir {
//    static astro::SkyDir interpolate(const astro::SkyDir & dir1, 
//                                     const astro::SkyDir & dir2,
//                                     double t1, double t2, double tt) {
//       return astro::SkyDir((tt - t1)/(t2 - t1)*(dir2() - dir1()) + dir1());
//    }
//    astro::SkyDir operator+(const astro::SkyDir & other) {
//       return astro::SkyDir(self->operator()() + other());
//    }
// }
// %extend astro::JulianDate {
//    std::vector<double> gregorianDate() {
//       int year, month, day;
//       double hours;
//       self->getGregorianDate(year, month, day, hours);
//       std::vector<double> data;
//       data.push_back(year);
//       data.push_back(month);
//       data.push_back(day);
//       data.push_back(hours);
//       return data;
//    }
// }
%extend grbASP::ClusterAlg {
   std::pair< std::pair<double, double>, astro::SkyDir>
      processEvents(const std::vector<Event> & events, double bg_rate=0) {
      double logLike_time, logLike_pos;
      astro::SkyDir meanDir;
      self->process(events, logLike_time, logLike_pos, meanDir, bg_rate);
      return std::make_pair(std::make_pair(logLike_time, logLike_pos),meanDir);
   }
}
