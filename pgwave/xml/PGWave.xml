<?xml version="1.0" encoding="UTF-8"?>
<pipeline
   xmlns="http://glast-ground.slac.stanford.edu/pipeline"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://glast-ground.slac.stanford.edu/pipeline http://glast-ground.slac.stanford.edu/Pipeline-II/schemas/2.0/pipeline.xsd">
<!-- $Header$
-->
<task name="PGWave" version="1.0" type="Data">
  <variables>
    <!-- Default values that can be overridden at the command line. -->
    <var name="ST_INST">"/nfs/farm/g/glast/u30/builds/rh9_gcc32/ScienceTools/ScienceTools-v9r1p1"</var>
    <var name="BINDIR">rh9_gcc32</var>
  </variables>
  <prerequisites>
    <prerequisite name="OUTPUTDIR" type="string"/>
    <prerequisite name="TSTART" type="string"/>
    <prerequisite name="TSTOP" type="string"/>
    <prerequisite name="ASP_PATH" type="string"/>
    <prerequisite name="CATDIR" type="string"/>
    <prerequisite name="PGWAVEGROOT" type="string"/>
  </prerequisites>

  <process name="catalogQuery">
    <script>
      <![CDATA[
        outfile = pipeline.createFile("Ft1FileList")
        logicalPath = "/DC2/Downlinks"
        opt1 = '(%(TSTART)i <= nTStart && nTStop <= %(TSTOP)i)' % locals()
        opt2 = '(nTStart <= %(TSTART)i && %(TSTART)i <= nTStop)' % locals()
        opt3 = '(nTStart <= %(TSTOP)i && %(TSTOP)i <= nTStop)' % locals()
        query = ('DataType == \"FITS\" && (%s || %s || %s)' 
                 % (opt1, opt2, opt3))
        datasetList = datacatalog.getDatasets(logicalPath, query)
        datasetList.writeToFile(outfile, 1)
        pipeline.writeFile(outfile)
      ]]>
    </script>
  </process>

  <process name="getPgwInputData">
    <job executable="${PGWAVEROOT}/${BINDIR}/getPgwInputData.sh" 
         batchOptions=" -q express " allocationGroup="glastdata" />
    <depends>
      <after process="catalogQuery" status="SUCCESS"/>
    </depends>
  </process>

  <process name="runpgw">
    <job executable="${PGWAVEGROOT}/${BINDIR}/runpgw.sh"
         batchOptions=" -q medium " allocationGroup="glastdata" />
    <depends>
      <after process="getPgwInputData" status="SUCCESS"/>
    </depends>


</task><!--PGWave-->

</pipeline>
