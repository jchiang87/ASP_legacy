%module(docstring="Interface to healpix") healpix
%{
#include <stdexcept>
#include <vector>

#include "astro/SkyDir.h"
#include "astro/SkyProj.h"
#include "astro/Photon.h"

#include "healpix/Healpix.h"
#include "healpix/HealPixel.h"
#include "healpix/HealPixMap.h"
#include "healpix/CosineBinner.h"

%}
%include stl.i
%exception {
   try {
      $action
   } catch (const std::exception & eObj) {
      if( strcmp(eObj.what(),"StopIteration")==0 ){
          PyErr_SetString(PyExc_StopIteration, const_cast<char *>(eObj.what()));
      } else if(strcmp(eObj.what(),"IndexError")==0 ){
          PyErr_SetString(PyExc_IndexError, const_cast<char *>(eObj.what()));
      } else {
          PyErr_SetString(PyExc_RuntimeError, const_cast<char*>(eObj.what()));
      }
      return NULL;
   }
}


%template(DoublePair) std::pair<double, double>;
%template(StringVector) std::vector<std::string>;
%template(DoubleVector) std::vector<double>;
%template(FloatVector) std::vector<float>;
%template(LongVector) std::vector<long>;

%include $(HEALPIXROOT)/healpix/Healpix.h
%include $(HEALPIXROOT)/healpix/HealpixMap.h
%extend healpix::HealpixMap{
   float __getitem__(size_t i)            {return (*self)[i];}
   double __call__(const astro::SkyDir& d){return (*self)(d);}
   size_t __len__() {return self->size();}
}  

%include $(HEALPIXROOT)/healpix/CosineBinner.h

// fails now?
//%include $(HEALPIXROOT)/healpix/HealPixel.h




