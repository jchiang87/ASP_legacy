<?xml version="1.0" encoding="UTF-8"?>
<pipeline
   xmlns="http://glast-ground.slac.stanford.edu/pipeline"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://glast-ground.slac.stanford.edu/pipeline http://glast-ground.slac.stanford.edu/Pipeline-II/schemas/2.0/pipeline.xsd">
<!-- $Header$
-->
<task name="DRP_monitoring" version="5.0" type="Data">
  <variables>
    <!-- Default values that can be overridden at the command line. -->
    <var name="ST_INST">"/nfs/farm/g/glast/u30/builds/rh9_gcc32/ScienceTools/ScienceTools-v9r3p1"</var>
    <var name="BINDIR">rh9_gcc32</var>
  </variables>
  <prerequisites>
    <prerequisite name="OUTPUTDIR" type="string"/>
    <prerequisite name="logicalPath" type="string"/>
    <prerequisite name="TSTART" type="string"/>
    <prerequisite name="TSTOP" type="string"/>
    <prerequisite name="num_RoIs" type="integer"/>
    <prerequisite name="ASP_PATH" type="string"/>
    <prerequisite name="DRPMONITORINGROOT" type="string"/>
  </prerequisites>

  <process name="catalogQuery">
    <script><![CDATA[
      def query(outfile, path, TSTART, TSTOP):
          output = pipeline.createFile(outfile)
          opt1 = '(%(TSTART)i <= nMetStart && nMetStop <= %(TSTOP)i)' % locals()
          opt2 = '(nMetStart <= %(TSTART)i && %(TSTART)i <= nMetStop)' % locals()
          opt3 = '(nMetStart <= %(TSTOP)i && %(TSTOP)i <= nMetStop)' % locals()
          query = ('DataType == \"%s\" && (%s || %s || %s)' 
                   % (path, opt1, opt2, opt3))
          datasetList = datacatalog.getDatasets(logicalPath+'/'+path, query)
          datasetList.writeToFile(output)
          pipeline.writeFile(output)
      query("Ft1FileList", "FT1", TSTART, TSTOP)
      query("Ft2FileList", "FT2", TSTART, TSTOP)
      ]]>
    </script>
  </process>

  <process name="getIntervalData">
    <job executable="${DRPMONITORINGROOT}/${BINDIR}/getIntervalData.sh" 
         batchOptions=" -q glastdataq " allocationGroup="glastdata" />
    <depends>
      <after process="catalogQuery" status="SUCCESS"/>
    </depends>
  </process>

  <process name="diffuseResponses">
    <job executable="${DRPMONITORINGROOT}/${BINDIR}/diffuseResponses.sh"
         batchOptions=" -q medium " allocationGroup="glastdata" />
    <depends>
      <after process="getIntervalData" status="SUCCESS"/>
    </depends>
  </process>

  <process name="sourceSelection">
    <job executable="${DRPMONITORINGROOT}/${BINDIR}/sourceSelection.sh"
         batchOptions=" -q medium " allocationGroup="glastdata" />
    <depends>
      <after process="getIntervalData" status="SUCCESS"/>
    </depends>
  </process>

  <process name="launchRoiAnalyses">
    <script language="python">
      <![CDATA[
        for i in range(num_RoIs):
            pipeline.createSubstream("roiAnalysis", i+1)
      ]]>
    </script>
    <depends>
      <after process="diffuseResponses" status="SUCCESS"/>
      <after process="sourceSelection" status="SUCCESS"/>
    </depends>
    <createsSubtasks>
      <subtask>roiAnalysis</subtask>
    </createsSubtasks>
  </process>

  <task name="roiAnalysis" version="1.0" type="Data">
    <process name="getRoiData">
      <variables>
        <var name="ROI_ID">${pipeline.stream}</var>
      </variables>
      <job executable="${DRPMONITORINGROOT}/${BINDIR}/getRoiData.sh" 
           batchOptions=" -q glastdataq " allocationGroup="glastdata" />
    </process>

    <process name="exposureMap">
      <variables>
        <var name="ROI_ID">${pipeline.stream}</var>
      </variables>
      <script language="python">
        <![CDATA[
          args = "ROI_ID=%i" % pipeline.stream
          #submaps = 4
          submaps = 1
          for i in range(submaps):
              pipeline.createSubstream("exposureSubMap", i+1, args)
        ]]>
      </script>
      <depends>
        <after process="getRoiData" status="SUCCESS"/>
      </depends>
      <createsSubtasks>
        <subtask>exposureSubMap</subtask>
      </createsSubtasks>
    </process>

    <process name="combineExpMaps">
      <variables>
        <var name="ROI_ID">${pipeline.stream}</var>
      </variables>
      <job executable="${DRPMONITORINGROOT}/${BINDIR}/combineDrpExpMaps.sh" 
           batchOptions=" -q express " allocationGroup="glastdata" />
      <depends>
        <after process="exposureSubMap.drpExpMap" status="SUCCESS"/>
      </depends>
    </process>

    <process name="sourceAnalysis">
      <variables>
        <var name="ROI_ID">${pipeline.stream}</var>
      </variables>
      <job executable="${DRPMONITORINGROOT}/${BINDIR}/sourceAnalysis.sh"
           batchOptions=" -q glastdataq " allocationGroup="glastdata" />
      <depends>
        <after process="combineExpMaps" status="SUCCESS"/>
      </depends>
    </process>

    <process name="launchEnergyBandAnalyses">
      <script language="python">
        <![CDATA[
          #emins = [100, 300, 1e3, 3e3, 1e4, 100]
          #emaxs = [300, 1e3, 3e3, 1e4, 100, 3e5]
          emins = [100, 100]
          emaxs = [3e5, 300]
          for i, emin, emax in zip(range(len(emins)), emins, emaxs):
              args = "emin=%i,emax=%i,ROI_ID=%i" % (emin, emax,
                                                    pipeline.stream)
              pipeline.createSubstream("energyBandAnalysis", i, args)
        ]]>
      </script>
      <depends>
        <after process="sourceAnalysis" status="SUCCESS"/>
      </depends>
      <createsSubtasks>
        <subtask>energyBandAnalysis</subtask>
      </createsSubtasks>
    </process>

    <task name="exposureSubMap" version="1.0" type="Data">
      <prerequisites>
        <prerequisite name="ROI_ID" type="string"/>
      </prerequisites>
      <process name="drpExpMap">
        <variables>
          <var name="EXPMAP_ID">${pipeline.stream}</var>
        </variables>
        <job executable="${DRPMONITORINGROOT}/${BINDIR}/drpExpMap.sh"
             batchOptions=" -q glastdataq " allocationGroup="glastdata" />
      </process>
    </task> <!--exposureSubMap-->

    <task name="energyBandAnalysis" version="1.0" type="Data">
      <prerequisites>
        <prerequisite name="emin" type="integer"/>
        <prerequisite name="emax" type="integer"/>
        <prerequisite name="ROI_ID" type="string"/>
      </prerequisites>
      <process name="fitEnergyBand">
        <job executable="${DRPMONITORINGROOT}/${BINDIR}/fitEnergyBand.sh"
             batchOptions=" -q glastdataq " allocationGroup="glastdata" />
      </process>
    </task>

  </task><!--roiAnalysis-->

</task><!--DRP_monitoring-->

</pipeline>
