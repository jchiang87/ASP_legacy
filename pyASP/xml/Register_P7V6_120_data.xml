<?xml version="1.0" encoding="UTF-8"?>
<pipeline xmlns="http://glast-ground.slac.stanford.edu/pipeline" xmlns:xs="http://www.w3.org/2001/XMLSchema-instance" xs:schemaLocation="http://glast-ground.slac.stanford.edu/pipeline http://glast-ground.slac.stanford.edu/Pipeline-II/schemas/2.0/pipeline.xsd">
  <task name="Register_P7V6_P120_data" type="Data" version="1.3">
    <notation>Register P7V6_P120 data with nDownlink metadata and FT2 files</notation>
    <variables>
      <var name="BINDIR">bin/redhat5-i686-32bit-gcc41-Optimized</var>
      <var name="outputFolder">/ASP/P7V6_P120</var>
    </variables>
    <prerequisites>
      <prerequisite name="INST_DIR" type="string"/>
    </prerequisites>
    <process name="computeFileInfo">
      <job executable="${INST_DIR}/${BINDIR}/computeFileInfo_P7V6.sh"
           batchOptions="-q glastdataq " allocationGroup="glastdata"/>
    </process>
    <process name="launchRegistrationTasks">
      <script><![CDATA[
         computeFileInfo = pipeline.getProcessInstance("computeFileInfo")
         ft1_fileList = computeFileInfo.getVariable("ft1_fileList")
         ft2_fileList = computeFileInfo.getVariable("ft2_fileList")
         ext_fileList = computeFileInfo.getVariable("ext_fileList")
         numfiles = int("%s" % computeFileInfo.getVariable("numfiles"))
         args = ('ft1_fileList=%s,ft2_fileList=%s,ext_fileList=%s'
                 % (ft1_fileList, ft2_fileList, ext_fileList)) + ',fileEntry=%i'
         for i in range(numfiles):
             pipeline.createSubstream("registerDatasetTask", i, args % i)
      ]]></script>
      <depends>
        <after process="computeFileInfo" status="SUCCESS"/>
      </depends>
      <createsSubtasks>
        <subtask>registerDatasetTask</subtask>
      </createsSubtasks>
    </process>
    <task name="registerDatasetTask" version="1.0" type="Data">
      <prerequisites>
        <prerequisite name="ft1_fileList" type="string"/>
        <prerequisite name="ft2_fileList" type="string"/>
        <prerequisite name="ext_fileList" type="string"/>
        <prerequisite name="fileEntry" type="integer"/>
      </prerequisites>
      <process name="readFileInfo">
        <job executable="${INST_DIR}/${BINDIR}/readFileInfo_P7V6.sh"
             batchOptions="-q glastdataq " allocationGroup="glastdata"/>
      </process>
      <process name="registerDataset">
        <script><![CDATA[
          #
          # Function to register Level 1 FITS files.
          #
          def register_file(filename_var, group):
              fileInfo = pipeline.getProcessInstance("readFileInfo")
              fileName = fileInfo.getVariable(filename_var)
              basename = fileName.split('/')[-1]
              nDownlink = fileInfo.getVariable("nDownlink")
              tstart = fileInfo.getVariable("tstart")
              tstop = fileInfo.getVariable("tstop")
              print fileName, nDownlink, tstart, tstop
              attributes = ('nDownlink=%s:nMetStart=%s:nMetStop=%s'
                            % (nDownlink, tstart, tstop))
              folder = '%s/%s:%s' % (outputFolder, group, basename)
              fileName += "@SLAC_XROOT"
              datacatalog.registerDataset(group, folder, fileName, attributes)
          register_file('ft1_fileName', 'FT1')
          register_file('ft2_fileName', 'FT2')
          register_file('ext_fileName', 'EXTENDEDFT1')
        ]]>
        </script>
        <depends>
          <after process="readFileInfo" status="SUCCESS"/>
        </depends>
      </process>
    </task>
  </task>
</pipeline>
